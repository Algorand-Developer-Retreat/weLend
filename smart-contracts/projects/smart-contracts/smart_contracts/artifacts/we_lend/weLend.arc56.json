{
    "name": "weLend",
    "structs": {
        "AcceptedCollateral": [
            {
                "name": "assetId",
                "type": "uint64"
            },
            {
                "name": "baseAssetId",
                "type": "uint64"
            }
        ],
        "LoanRecord": [
            {
                "name": "borrowerAddress",
                "type": "address"
            },
            {
                "name": "collateralTokenId",
                "type": "uint64"
            },
            {
                "name": "collateralAmount",
                "type": "uint64"
            },
            {
                "name": "disbursement",
                "type": "uint64"
            },
            {
                "name": "scaledDownDisbursement",
                "type": "uint64"
            },
            {
                "name": "borrowedTokenId",
                "type": "uint64"
            },
            {
                "name": "loanRecordASAId",
                "type": "uint64"
            }
        ],
        "Oracle": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "contractAppId",
                "type": "uint64"
            },
            {
                "name": "asset1LastCumulativePrice",
                "type": "uint64"
            },
            {
                "name": "asset2LastCumulativePrice",
                "type": "uint64"
            },
            {
                "name": "cumulativePriceLastTimestamp",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "account",
                    "name": "admin"
                },
                {
                    "type": "uint64",
                    "name": "baseTokenId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initApplication",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrTxn"
                },
                {
                    "type": "uint64",
                    "name": "ltv_bps"
                },
                {
                    "type": "uint64",
                    "name": "liq_threshold_bps"
                },
                {
                    "type": "uint64",
                    "name": "interest_bps"
                },
                {
                    "type": "uint64",
                    "name": "origination_fee_bps"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCirculatingLST",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTotalDeposits",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getOraclePoolsCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getAcceptedCollateralsCount",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addOraclePool",
            "args": [
                {
                    "type": "address",
                    "name": "poolAddress"
                },
                {
                    "type": "uint64",
                    "name": "contractAppId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getOraclePrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                },
                {
                    "type": "uint64",
                    "name": "oracleIndex"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPricesFromOracles",
            "args": [
                {
                    "type": "uint64",
                    "name": "tokenId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addNewCollateralType",
            "args": [
                {
                    "type": "uint64",
                    "name": "collateralTokenId"
                },
                {
                    "type": "uint64",
                    "name": "baseTokenId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "depositASA",
            "args": [
                {
                    "type": "axfer",
                    "name": "assetTransferTxn"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdrawDeposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "assetTransferTxn"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "borrow",
            "args": [
                {
                    "type": "axfer",
                    "name": "assetTransferTxn"
                },
                {
                    "type": "uint64",
                    "name": "requestedLoanAmount"
                },
                {
                    "type": "uint64",
                    "name": "lstApp"
                },
                {
                    "type": "uint64",
                    "name": "collateralTokenId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLoanRecord",
            "args": [
                {
                    "type": "account",
                    "name": "borrowerAddress"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "LoanRecord"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLoanRecordASAId",
            "args": [
                {
                    "type": "account",
                    "name": "borrowerAddress"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 9,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "base_token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "YmFzZV90b2tlbl9pZA=="
                },
                "lst_token_id": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "bHN0X3Rva2VuX2lk"
                },
                "circulating_lst": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y2lyY3VsYXRpbmdfbHN0"
                },
                "total_deposits": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfZGVwb3NpdHM="
                },
                "admin_account": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW5fYWNjb3VudA=="
                },
                "ltv_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bHR2X2Jwcw=="
                },
                "liq_threshold_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlxX3RocmVzaG9sZF9icHM="
                },
                "interest_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aW50ZXJlc3RfYnBz"
                },
                "origination_fee_bps": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "b3JpZ2luYXRpb25fZmVlX2Jwcw=="
                },
                "active_loan_records": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWN0aXZlX2xvYW5fcmVjb3Jkcw=="
                },
                "oracle_pools_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "b3JhY2xlX3Bvb2xzX2NvdW50"
                },
                "accepted_collaterals_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjZXB0ZWRfY29sbGF0ZXJhbHNfY291bnQ="
                }
            },
            "local": {},
            "box": {
                "oracle_pools": {
                    "keyType": "AVMString",
                    "valueType": "Oracle",
                    "key": "b3JhY2xlX3Bvb2xz"
                },
                "accepted_collaterals": {
                    "keyType": "AVMString",
                    "valueType": "AcceptedCollateral",
                    "key": "YWNjZXB0ZWRfY29sbGF0ZXJhbHM="
                },
                "loan_records": {
                    "keyType": "AVMString",
                    "valueType": "LoanRecord",
                    "key": "bG9hbl9yZWNvcmRz"
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1092,
                        1203,
                        1285,
                        1605,
                        1912,
                        1923
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1644,
                        1675
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        1592
                    ],
                    "errorMessage": "Collateral not found"
                },
                {
                    "pc": [
                        1094
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        427,
                        450,
                        472,
                        505,
                        531,
                        557,
                        575,
                        596,
                        621,
                        639,
                        656,
                        673,
                        690,
                        707,
                        745
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        818,
                        1399,
                        1504,
                        1576
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        908,
                        913,
                        920
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        749
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        430,
                        453,
                        475,
                        508,
                        534,
                        560,
                        578,
                        599,
                        624,
                        642,
                        659,
                        676,
                        693,
                        710
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        789,
                        800,
                        880,
                        899,
                        929,
                        974,
                        980,
                        985,
                        990,
                        1001,
                        1057,
                        1070,
                        1181,
                        1240,
                        1248,
                        1270,
                        1305,
                        1318,
                        1366,
                        1405,
                        1422,
                        1444,
                        1451,
                        1471,
                        1509,
                        1516,
                        1528,
                        1543,
                        1585,
                        1701,
                        1713,
                        1726,
                        1761,
                        1794,
                        1840,
                        1876
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        485,
                        518,
                        544
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        720
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}