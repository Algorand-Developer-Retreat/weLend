{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/weLend/smart-contracts/projects/smart-contracts/smart_contracts/we_lend/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BE;AAAmD;AAAnD;AAGA;;AAAkD;AAAlD;AANF;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAwPG;;AAAA;AAAA;AAAA;;AAAA;AAxPH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAwPG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAnOH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAmOG;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AA3MH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA2MG;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AAjKH;;;AAAA;;;AAiKG;;;AAAA;;AAjCD;;AAAA;AAAA;AAAA;;AAAA;AAhIF;;;AAAA;AAgIE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAtGF;;;AAAA;AAAA;;;AAAA;AAsGE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA5FF;;;AAAA;;;AA4FE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3CC;;AAAA;AAAA;AAAA;;AAAA;AArCH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAqCG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA/BH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA+BG;;;AAAA;;AAAD;;;AAlBA;AAoBE;;AAAA;AA9BF;AA+BE;;AAAA;;AAGF;;;AAQgB;;AAhChB;AAAA;AAAA;AAAA;AAgCS;AAAP;AAEA;;AAAA;;AAlCF;AAAA;AAAA;AAAA;AAkCE;AAAA;;;AAAA;;AAAA;;AAEU;;;;AAFV;AAAA;;;;AAAA;AAhCF;;AAqCE;;AAAA;AAnCF;;;;;;;;;;;;;;;;;;;AAoCE;;AAAA;AAlCF;;;;;;;;;;;;;;AAmCE;;AAAA;AAjCF;;AAkCE;;AAAA;AA5BF;AA6BkC;AAAhC;AAGA;AAE0B;;AA1D5B;AAAA;AAAA;AAAA;AA4DmB;;;;;;;AAJjB;;;AAAA;;;AAAA;AAQe;AAEI;;AAlErB;AAAA;AAAA;AAAA;AAmEsC;;AAAA;AAnEtC;AAAA;AAAA;AAAA;AAoEyC;;AAAA;AAEnB;;AAtEtB;AAAA;AAAA;AAAA;AAuEsD;;AAAA;AAAtC;;;AAAA;AAAA;;;;;AAFK;;;;;;;;;AALJ;;;;AAAA;;;AAAA;AA7DjB;;;;AAuEE;;;;;;AArEF;AAAA;;AAAA;AAAA;AAyEE;AAvEF;AAAA;;AAAA;AAAA;AA2EE;AA1DF;AAAA;AAAA;AAAA;AA8DE;AAGF;;;AACgB;;AAhFhB;AAAA;AAAA;AAAA;AAgFS;AAAP;AAC0B;;AAAA;;AAAA;AAnE5B;AAAA;AAAA;AAAA;AAuEqE;AAAhC;AAAjB;AA3EgC;;AAAA;AAAA;AA2ElD;AAAA;AAvEF;AAAA;AAAA;AAAA;AAwEkE;AAAhC;AAxElC;AAwEE;AAAA;;AAGF;;;AACmC;;AAAA;AAhFiB;;AAAA;AAAA;AAgFc;AAAA;AAC1D;AAAiB;;;AAAjB;AAAA;;AACuB;;AAEsB;AAA7C;AAAA;;AAE+F;;;;;;;;;;;;AAAhE;AAAA;AAEjC;;AAAA;AAAJ;;;AAC+B;;AAAA;AAGrB;;;;;;;;;;;;;;;;;;;;;;;;;;AAHqB;AAAA;AAK7B;AAAA;AAE6B;;AAAA;AAGrB;;;;;;;;;;;;;;;;;;;;;;;;;;AAHqB;AAAA;AAK7B;AAAA;AAIJ;;;AArGA;AAAA;AAAA;AAAA;AAuG2B;AACJ;AAAG;;AAAA;;AAAA;AAAxB;;;AACmC;;AAAA;AAAA;AA7Ge;;AAAA;AAAA;AA6GM;AAAA;;AAAA;AAGhD;;AAAA;;AAAQ;;;AACd;;AAAA;AAAA;;AALuC;AAAA;AAAA;;;;;AAOpB;;AAAc;AAAd;AAAd;;AAAA;AAAA;AAAP;;AAAA;AAuBF;;;AAEgB;;AAtJhB;AAAA;AAAA;AAAA;AAsJS;AAAP;AACyB;;AAAA;AAAA;AAjK3B;AAAA;AAAA;AAAA;AAiKS;AAAP;AACmB;;AAAA;AAlKrB;AAAA;AAAA;AAAA;AAkKS;AAAP;AAvBqB;AAjHvB;AAAA;;AAAA;AAAA;AAiH0B;;AAAA;AAAxB;;;AAC+C;;AAAA;AAtHuB;;AAAA;AAAA;AAsHF;AAAA;AACnD;AAAQ;AAAnB;;AAAA;AAAJ;;;AACS;AAqBJ;AAAP;AAEkD;;AAAA;;AAAA;AA3IpD;AAAA;;AAAA;AAAA;AA+IqF;AAAxC;AAAjB;AAnJ4C;;AAAA;AAAA;AAmJtE;AAAA;AA/IF;AAAA;;AAAA;AAAA;AAiJkF;AAAxC;AAjJ1C;;AAiJE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AAAA;;;AAAA;;AAjCmE;;AAAA;AAAA;AAAA;;;;;AAM5D;AAkBC;;;AAqCV;;;AAEE;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AA1MF;AAAA;AAAA;AAAA;AA0ME;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAO2D;;AAjN7D;AAAA;AAAA;AAAA;AAiNyB;;AAAjB;AACN;;;;;AAKA;AAE0B;;AAtN5B;AAAA;;AAAA;AAAA;;;;;;;;;AAoNE;;;AAAA;;;AAAA;;AAlNF;AAAA;;AAAA;AAAA;AAkLiE;AAAjC;AAhLhC;AAAA;;AAAA;AAAA;AAkLmB;AAEa;;AAAA;AACG;AAA1B;;;;;;;;AAoCT;;;AAEE;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AA/NF;AAAA;;AAAA;AAAA;AA+NE;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA3NF;AAAA;;AAAA;AAAA;AAyLgE;AAAhC;AA3LhC;AAAA;;AAAA;AAAA;AA6LmB;AAEa;;AAAA;AACG;AAA1B;AAsCoC;;AA3O7C;AAAA;AAAA;AAAA;AA2OS;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AA9O5B;AAAA;AAAA;AAAA;;;;;;;;;AA4OE;;;AAAA;;;AAAA;;;;;;AASF;;;;AASE;;AAAA;;AACwB;;AADxB;AAAA;AAKM;;AAA6C;;AA9G9B;AA3HvB;AAAA;;AAAA;AAAA;AA2H0B;;AAAA;AAAA;;AAAA;AAAxB;AAC+C;AAhIuB;;AAAA;AAAA;AAgIF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACnD;AAAQ;AAA6B;;AAAA;AAAhD;AAAJ;;;AAoH6B;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAGD;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAKO;;AAAA;AAC/B;;AAA+B;AAIgD;;AAAZ;;AAAY;AAAzD;;;AAKL;AAE0B;;;;AAAnB;AAnRhC;AAAA;;AAAA;AAAA;AAuRgC;AAAsC;AAAvC;AAGtB;;AAAA;AAAP;AApRF;AAAA;;AAAA;AAAA;AAuRuB;;AAAA;AAAwD;AAAzD;AACd;;AAAA;AAAuB;AAI7B;AAE0B;;AAhT5B;AAAA;AAAA;AAAA;;;;;;;;;AA8SE;;;AAAA;;;AAAA;;AAzJmE;;AAAA;AAAA;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 10000"
    },
    "8": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"oracle_pools_count\" \"admin_account\" \"accepted_collaterals_count\" \"lst_token_id\" \"circulating_lst\" \"total_deposits\" \"oracle_pools\" \"accepted_collaterals\" 0x09ef525f 0xae859f3b \"ltv_bps\" \"origination_fee_bps\""
    },
    "205": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "207": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "210": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\""
      ],
      "stack_out": [
        "\"base_token_id\""
      ]
    },
    "211": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "\"base_token_id\"",
        "0"
      ]
    },
    "212": {
      "op": "app_global_put",
      "stack_out": []
    },
    "213": {
      "op": "bytec 5 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "215": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lst_token_id\"",
        "0"
      ]
    },
    "216": {
      "op": "app_global_put",
      "stack_out": []
    },
    "217": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "219": {
      "op": "bz main_after_if_else@20",
      "stack_out": []
    },
    "222": {
      "op": "pushbytess 0x17e5f6d3 0x6e01402e // method \"createApplication(account,asset)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64)void\"",
      "defined_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ]
    },
    "234": {
      "op": "bytec 10 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(createApplication(account,asset)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "236": {
      "op": "bytec 11 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(createApplication(account,asset)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "238": {
      "op": "pushbytess 0x8925c50f 0x31274359 0x8bbde2aa 0xd4bfb233 0xb014f687 0x3acbfb6f 0xf445489b 0xd501c95d // method \"getOraclePoolsCount()uint64\", method \"addOraclePool(address,uint64)void\", method \"getOraclePrice(uint64,uint64)uint64\", method \"getPricesFromOracles(uint64)uint64\", method \"addNewCollateralType(uint64,uint64)void\", method \"depositASA(axfer,uint64)void\", method \"withdrawDeposit(axfer,uint64)void\", method \"borrow(axfer,uint64,uint64,uint64)void\"",
      "defined_out": [
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(createApplication(account,asset)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)"
      ]
    },
    "280": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(createApplication(account,asset)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,asset)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "tmp%2#0"
      ]
    },
    "283": {
      "op": "match main_createApplication_route@5 main_initApplication_route@6 main_getCirculatingLST_route@7 main_getTotalDeposits_route@8 main_getOraclePoolsCount_route@9 main_addOraclePool_route@10 main_getOraclePrice_route@11 main_getPricesFromOracles_route@12 main_addNewCollateralType_route@13 main_depositASA_route@14 main_withdrawDeposit_route@15 main_borrow_route@16",
      "stack_out": []
    },
    "309": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "block": "main_borrow_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "313": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "314": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "315": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "317": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "318": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "320": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0",
        "1"
      ]
    },
    "321": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "322": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "323": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "325": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "326": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "327": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "328": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "331": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%73#0"
      ]
    },
    "332": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%13#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%73#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "335": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%73#0",
        "tmp%74#0"
      ]
    },
    "336": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%14#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "339": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "block": "main_withdrawDeposit_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "346": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "347": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "348": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "350": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "351": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "353": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "1"
      ]
    },
    "354": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "355": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "356": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "358": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "359": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "360": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "361": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%67#0"
      ]
    },
    "365": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "368": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_depositASA_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "1"
      ]
    },
    "380": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "381": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "382": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "384": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "385": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "386": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "387": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "390": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%61#0"
      ]
    },
    "391": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "394": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "395": {
      "op": "return",
      "stack_out": []
    },
    "396": {
      "block": "main_addNewCollateralType_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "398": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "399": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "400": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "402": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "403": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "406": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "409": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "413": {
      "op": "return",
      "stack_out": []
    },
    "414": {
      "block": "main_getPricesFromOracles_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "416": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "417": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "418": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "420": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "421": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "424": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "425": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getPricesFromOracles",
      "op": "callsub getPricesFromOracles",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "428": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "429": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "430": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "431": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "432": {
      "op": "log",
      "stack_out": []
    },
    "433": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "return",
      "stack_out": []
    },
    "435": {
      "block": "main_getOraclePrice_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "437": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "438": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "439": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "441": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "442": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "445": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "446": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "449": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "450": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "453": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "454": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "457": {
      "op": "log",
      "stack_out": []
    },
    "458": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "block": "main_addOraclePool_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "462": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "467": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "470": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "473": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.addOraclePool",
      "op": "callsub addOraclePool",
      "stack_out": []
    },
    "476": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "477": {
      "op": "return",
      "stack_out": []
    },
    "478": {
      "block": "main_getOraclePoolsCount_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getOraclePoolsCount",
      "op": "callsub getOraclePoolsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "488": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "489": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "492": {
      "op": "log",
      "stack_out": []
    },
    "493": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "return",
      "stack_out": []
    },
    "495": {
      "block": "main_getTotalDeposits_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "497": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "498": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "499": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "501": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "502": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "505": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "506": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "507": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "509": {
      "op": "log",
      "stack_out": []
    },
    "510": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "511": {
      "op": "return",
      "stack_out": []
    },
    "512": {
      "block": "main_getCirculatingLST_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "514": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "515": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "516": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "518": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "519": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "522": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "523": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "524": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "525": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "526": {
      "op": "log",
      "stack_out": []
    },
    "527": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "528": {
      "op": "return",
      "stack_out": []
    },
    "529": {
      "block": "main_initApplication_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "532": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "533": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "535": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "536": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "538": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "1"
      ]
    },
    "539": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "540": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "541": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "543": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "544": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "545": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "546": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "549": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0"
      ]
    },
    "550": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "553": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "554": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "558": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "561": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "562": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "block": "main_createApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "569": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "570": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "571": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "573": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "574": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "575": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "578": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "579": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "584": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "585": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "587": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "590": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "op": "return",
      "stack_out": []
    },
    "592": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "595": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "596": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "598": {
      "op": "app_global_put",
      "stack_out": []
    },
    "599": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\""
      ],
      "stack_out": [
        "\"base_token_id\""
      ]
    },
    "600": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"base_token_id\"",
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"base_token_id\"",
        "baseTokenId#0 (copy)"
      ]
    },
    "602": {
      "op": "app_global_put",
      "stack_out": []
    },
    "603": {
      "retsub": true,
      "op": "retsub"
    },
    "604": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "interest_bps#0": "uint64",
        "origination_fee_bps#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "607": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "609": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "610": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "611": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "612": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "614": {
      "op": "assert",
      "stack_out": []
    },
    "615": {
      "op": "frame_dig -5",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "617": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "619": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "620": {
      "op": "bytec_3 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "621": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "622": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "623": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "624": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "627": {
      "op": "frame_dig -5",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "629": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "631": {
      "op": "pushint 34000 // 34000",
      "defined_out": [
        "34000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "34000"
      ]
    },
    "635": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "636": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "639": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "640": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "641": {
      "op": "bytec 12 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "643": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "645": {
      "op": "app_global_put",
      "stack_out": []
    },
    "646": {
      "op": "pushbytes \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "665": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "667": {
      "op": "app_global_put",
      "stack_out": []
    },
    "668": {
      "op": "pushbytes \"interest_bps\"",
      "defined_out": [
        "\"interest_bps\""
      ],
      "stack_out": [
        "\"interest_bps\""
      ]
    },
    "682": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ],
      "stack_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ]
    },
    "684": {
      "op": "app_global_put",
      "stack_out": []
    },
    "685": {
      "op": "bytec 13 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "687": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "689": {
      "op": "app_global_put",
      "stack_out": []
    },
    "690": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\""
      ],
      "stack_out": [
        "\"oracle_pools_count\""
      ]
    },
    "691": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "\"oracle_pools_count\"",
        "0"
      ]
    },
    "692": {
      "op": "app_global_put",
      "stack_out": []
    },
    "693": {
      "op": "itxn_begin"
    },
    "694": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "697": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "699": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "701": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "703": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "705": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "707": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "708": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "710": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "711": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "713": {
      "op": "itxn_submit"
    },
    "714": {
      "op": "itxn_begin"
    },
    "715": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "717": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "718": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "719": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "720": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "721": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "check%0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "723": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "724": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "0"
      ]
    },
    "725": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "726": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "value%0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "727": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "maybe_value%4#0"
      ]
    },
    "728": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "check%1#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "730": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "731": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "733": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "0"
      ]
    },
    "734": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "735": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "736": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "maybe_value%5#0"
      ]
    },
    "737": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%2#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "739": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "740": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "743": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "744": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "745": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "747": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "749": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "750": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "752": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "754": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "756": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "758": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "760": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "762": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "763": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "765": {
      "op": "itxn_submit"
    },
    "766": {
      "op": "bytec 5 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\""
      ],
      "stack_out": [
        "\"lst_token_id\""
      ]
    },
    "768": {
      "op": "itxn ConfigAsset",
      "defined_out": [
        "\"lst_token_id\"",
        "result.ConfigAsset#0"
      ],
      "stack_out": [
        "\"lst_token_id\"",
        "result.ConfigAsset#0"
      ]
    },
    "770": {
      "op": "app_global_put",
      "stack_out": []
    },
    "771": {
      "retsub": true,
      "op": "retsub"
    },
    "772": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "773": {
      "op": "b initApplication_bool_merge@4"
    },
    "776": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "777": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "779": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "781": {
      "retsub": true,
      "op": "retsub"
    },
    "782": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "783": {
      "op": "bytec 7 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "786": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "787": {
      "retsub": true,
      "op": "retsub"
    },
    "788": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.getOraclePoolsCount",
      "params": {},
      "block": "getOraclePoolsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "789": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "791": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "792": {
      "retsub": true,
      "op": "retsub"
    },
    "793": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.addOraclePool",
      "params": {
        "poolAddress#0": "bytes",
        "contractAppId#0": "bytes"
      },
      "block": "addOraclePool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "796": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "798": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "799": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "800": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "801": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "802": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "803": {
      "op": "assert",
      "stack_out": []
    },
    "804": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolAddress#0 (copy)"
      ],
      "stack_out": [
        "poolAddress#0 (copy)"
      ]
    },
    "806": {
      "op": "frame_dig -1",
      "defined_out": [
        "contractAppId#0 (copy)",
        "poolAddress#0 (copy)"
      ],
      "stack_out": [
        "poolAddress#0 (copy)",
        "contractAppId#0 (copy)"
      ]
    },
    "808": {
      "op": "concat",
      "defined_out": [
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0"
      ]
    },
    "809": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newOracle#0",
        "0"
      ]
    },
    "810": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "811": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "812": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0"
      ]
    },
    "813": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "814": {
      "op": "+",
      "defined_out": [
        "newOracle#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "newOracle#0",
        "to_encode%0#0"
      ]
    },
    "815": {
      "op": "itob",
      "defined_out": [
        "newOracle#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "newOracle#0",
        "val_as_bytes%0#0"
      ]
    },
    "816": {
      "op": "bytec 8 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "newOracle#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "newOracle#0",
        "val_as_bytes%0#0",
        "\"oracle_pools\""
      ]
    },
    "818": {
      "op": "swap",
      "stack_out": [
        "newOracle#0",
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ]
    },
    "819": {
      "op": "concat",
      "defined_out": [
        "newOracle#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newOracle#0",
        "tmp%2#0"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "newOracle#0"
      ]
    },
    "821": {
      "op": "box_put",
      "stack_out": []
    },
    "822": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "823": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "824": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "825": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "826": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "827": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "828": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"oracle_pools_count\""
      ]
    },
    "829": {
      "op": "swap",
      "stack_out": [
        "\"oracle_pools_count\"",
        "new_state_value%0#0"
      ]
    },
    "830": {
      "op": "app_global_put",
      "stack_out": []
    },
    "831": {
      "retsub": true,
      "op": "retsub"
    },
    "832": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.getOraclePrice",
      "params": {
        "tokenId#0": "uint64",
        "oracleIndex#0": "uint64"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "835": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracleIndex#0 (copy)"
      ],
      "stack_out": [
        "oracleIndex#0 (copy)"
      ]
    },
    "837": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "838": {
      "op": "bytec 8 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"oracle_pools\""
      ]
    },
    "840": {
      "op": "swap",
      "stack_out": [
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ]
    },
    "841": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "842": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "843": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "oracle#0"
      ]
    },
    "844": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "845": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0"
      ]
    },
    "848": {
      "op": "dup",
      "stack_out": [
        "oracle#0",
        "address#0",
        "address#0 (copy)"
      ]
    },
    "849": {
      "op": "uncover 2",
      "defined_out": [
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "oracle#0"
      ]
    },
    "851": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "oracle#0",
        "32"
      ]
    },
    "853": {
      "op": "extract_uint64",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "854": {
      "op": "dup",
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0",
        "contractAppIdObj#0"
      ]
    },
    "855": {
      "op": "cover 2",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "857": {
      "op": "pushbytes \"asset_1_id\"",
      "defined_out": [
        "\"asset_1_id\"",
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0",
        "\"asset_1_id\""
      ]
    },
    "869": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "token_1_exists#0",
        "token_1_id#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "token_1_exists#0"
      ]
    },
    "870": {
      "op": "pop",
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0"
      ]
    },
    "871": {
      "op": "frame_dig -2",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "tokenId#0 (copy)",
        "token_1_id#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "tokenId#0 (copy)"
      ]
    },
    "873": {
      "op": "==",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "tmp%1#0"
      ]
    },
    "874": {
      "op": "bz getOraclePrice_else_body@2",
      "stack_out": [
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "877": {
      "op": "frame_dig 0",
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "address#0"
      ]
    },
    "879": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "880": {
      "op": "pushbytes \"asset_1_cumulative_price\"",
      "defined_out": [
        "\"asset_1_cumulative_price\"",
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0",
        "\"asset_1_cumulative_price\""
      ]
    },
    "906": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "price#0",
        "priceExists#0"
      ],
      "stack_out": [
        "address#0",
        "price#0",
        "priceExists#0"
      ]
    },
    "907": {
      "op": "pop",
      "stack_out": [
        "address#0",
        "price#0"
      ]
    },
    "908": {
      "op": "swap"
    },
    "909": {
      "retsub": true,
      "op": "retsub"
    },
    "910": {
      "block": "getOraclePrice_else_body@2",
      "stack_in": [
        "address#0",
        "contractAppIdObj#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "contractAppIdObj#0",
        "address#0"
      ]
    },
    "912": {
      "op": "swap",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "913": {
      "op": "pushbytes \"asset_2_cumulative_price\"",
      "defined_out": [
        "\"asset_2_cumulative_price\"",
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "contractAppIdObj#0",
        "\"asset_2_cumulative_price\""
      ]
    },
    "939": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "priceExists\u2081#0",
        "price\u2081#0"
      ],
      "stack_out": [
        "address#0",
        "price\u2081#0",
        "priceExists\u2081#0"
      ]
    },
    "940": {
      "op": "pop",
      "stack_out": [
        "address#0",
        "price\u2081#0"
      ]
    },
    "941": {
      "op": "swap"
    },
    "942": {
      "retsub": true,
      "op": "retsub"
    },
    "943": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.getPricesFromOracles",
      "params": {
        "tokenId#0": "uint64"
      },
      "block": "getPricesFromOracles",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "946": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "947": {
      "op": "bytec_2 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "948": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "maybe_exists%0#0"
      ]
    },
    "949": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracleIndex#0"
      ]
    },
    "950": {
      "op": "intc_0 // 0"
    },
    "951": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "952": {
      "block": "getPricesFromOracles_while_top@1",
      "stack_in": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "954": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "oracleIndex#0"
      ]
    },
    "956": {
      "op": "<",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "bz getPricesFromOracles_after_while@3",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "960": {
      "op": "frame_dig 2",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "962": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "963": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "964": {
      "op": "bytec 8 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "i#0",
        "oracleIndex#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"oracle_pools\""
      ]
    },
    "966": {
      "op": "swap",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ]
    },
    "967": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "968": {
      "op": "box_get",
      "defined_out": [
        "i#0",
        "maybe_exists%1#0",
        "oracle#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "oracle#0",
        "maybe_exists%1#0"
      ]
    },
    "969": {
      "op": "bury 1",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "971": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "972": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tokenId#0 (copy)"
      ]
    },
    "974": {
      "op": "dig 1",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tokenId#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "976": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "price#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "price#0"
      ]
    },
    "979": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "price#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "price#0",
        "totalPrice#0"
      ]
    },
    "981": {
      "op": "+",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "totalPrice#0"
      ]
    },
    "982": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "984": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "985": {
      "op": "+",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "986": {
      "op": "frame_bury 2",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "988": {
      "op": "b getPricesFromOracles_while_top@1"
    },
    "991": {
      "block": "getPricesFromOracles_after_while@3",
      "stack_in": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "oracleIndex#0"
      ]
    },
    "993": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "oracleIndex#0",
        "1"
      ]
    },
    "994": {
      "op": "+",
      "defined_out": [
        "oracleIndex#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "995": {
      "op": "frame_dig 1",
      "defined_out": [
        "oracleIndex#0",
        "tmp%2#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%2#0",
        "totalPrice#0"
      ]
    },
    "997": {
      "op": "swap",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "totalPrice#0",
        "tmp%2#0"
      ]
    },
    "998": {
      "op": "/",
      "defined_out": [
        "oracleIndex#0",
        "tmp%3#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "999": {
      "op": "frame_bury 0"
    },
    "1001": {
      "retsub": true,
      "op": "retsub"
    },
    "1002": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "baseTokenId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1005": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1008": {
      "op": "bytec_3 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1009": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1010": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1012": {
      "op": "assert",
      "stack_out": []
    },
    "1013": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "collateralTokenId#0 (copy)"
      ]
    },
    "1015": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1016": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1018": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1019": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1020": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "1021": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "1022": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1023": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseTokenId#0 (copy)"
      ]
    },
    "1025": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "1026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "0"
      ]
    },
    "1027": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1028": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1029": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "tmp%4#0",
        "maybe_value%2#0"
      ]
    },
    "1030": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1031": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1032": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1033": {
      "block": "addNewCollateralType_while_top@3",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1034": {
      "op": "bytec 4 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1036": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1037": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1"
      ]
    },
    "1038": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1",
        "i#0"
      ]
    },
    "1040": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "1041": {
      "op": "bz addNewCollateralType_after_while@7",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1044": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1046": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1047": {
      "op": "bytec 9 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1049": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1050": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "1051": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1052": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0"
      ]
    },
    "1053": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0",
        "0"
      ]
    },
    "1054": {
      "op": "extract_uint64",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%3#1"
      ]
    },
    "1055": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%3#1",
        "tmp%2#0"
      ]
    },
    "1057": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1058": {
      "op": "bz addNewCollateralType_after_if_else@6",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1061": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1062": {
      "block": "addNewCollateralType_after_inlined_smart_contracts/we_lend/contract.algo.ts::WeLend.collateralExists@8",
      "stack_in": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "1063": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1064": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1066": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateralTokenId#0 (copy)",
        "baseTokenId#0 (copy)"
      ]
    },
    "1068": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0"
      ]
    },
    "1069": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "0"
      ]
    },
    "1070": {
      "op": "bytec 4 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1072": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1073": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%3#0"
      ]
    },
    "1074": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1075": {
      "op": "+",
      "defined_out": [
        "newAcceptedCollateral#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "to_encode%0#0"
      ]
    },
    "1076": {
      "op": "itob",
      "defined_out": [
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ]
    },
    "1077": {
      "op": "bytec 9 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1079": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1080": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "1081": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%8#0",
        "newAcceptedCollateral#0"
      ]
    },
    "1082": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1083": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1084": {
      "op": "bytec 4 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1086": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1087": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%4#0"
      ]
    },
    "1088": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "1089": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "new_state_value%0#0"
      ]
    },
    "1090": {
      "op": "bytec 4 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1092": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "1093": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1094": {
      "op": "itxn_begin"
    },
    "1095": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1097": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1098": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1099": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1101": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "1103": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1105": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1107": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1109": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "4"
      ]
    },
    "1110": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1113": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1115": {
      "op": "itxn_submit"
    },
    "1116": {
      "retsub": true,
      "op": "retsub"
    },
    "1117": {
      "block": "addNewCollateralType_after_if_else@6",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1119": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1120": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1121": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1123": {
      "op": "b addNewCollateralType_while_top@3"
    },
    "1126": {
      "block": "addNewCollateralType_after_while@7",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1127": {
      "op": "b addNewCollateralType_after_inlined_smart_contracts/we_lend/contract.algo.ts::WeLend.collateralExists@8"
    },
    "1130": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1133": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1135": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1137": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1139": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1140": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": []
    },
    "1143": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1145": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1147": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1148": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1149": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1150": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "1151": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1152": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": []
    },
    "1155": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1157": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1159": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "1161": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1162": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": []
    },
    "1165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1166": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1167": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1169": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "1170": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1172": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "1173": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "depositBalance.0#0",
        "depositBalance.1#0"
      ],
      "stack_out": [
        "depositBalance.0#0",
        "depositBalance.1#0"
      ]
    },
    "1175": {
      "op": "pop",
      "stack_out": [
        "depositBalance.0#0"
      ]
    },
    "1176": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": []
    },
    "1179": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "1181": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "1182": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1184": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1185": {
      "op": "bytec 5 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "1187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1188": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1189": {
      "op": "uncover 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "lstDue#2",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "lstDue#2"
      ]
    },
    "1191": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1193": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1195": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1197": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1198": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1200": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1201": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1203": {
      "op": "itxn_submit"
    },
    "1204": {
      "retsub": true,
      "op": "retsub"
    },
    "1205": {
      "block": "depositASA_else_body@7",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1206": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "1208": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1209": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1210": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "1211": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "1212": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "1213": {
      "op": "bytec 7 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1215": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1216": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "1217": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "1218": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "1220": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "1221": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "1222": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "lstDue#2"
      ]
    },
    "1223": {
      "op": "b depositASA_after_if_else@8"
    },
    "1226": {
      "block": "depositASA_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1227": {
      "op": "b depositASA_bool_merge@5"
    },
    "1230": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1233": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1235": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1239": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1240": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": []
    },
    "1243": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1245": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1247": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1248": {
      "op": "bytec 5 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "1250": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1251": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "1252": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1253": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": []
    },
    "1256": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1258": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1260": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "1262": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1263": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": []
    },
    "1266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1267": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "1268": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1269": {
      "op": "bytec 7 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "1271": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1272": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1273": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "10000"
      ]
    },
    "1274": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "1275": {
      "op": "intc_0 // 0",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "1276": {
      "op": "bytec 6 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "1278": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1279": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#0"
      ]
    },
    "1280": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0"
      ]
    },
    "1281": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "1283": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "1284": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "1285": {
      "op": "divw",
      "defined_out": [
        "asaDue#0"
      ],
      "stack_out": [
        "asaDue#0"
      ]
    },
    "1286": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asaDue#0",
        "tmp%7#0"
      ]
    },
    "1288": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asaDue#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1289": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "asaDue#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asaDue#0",
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1290": {
      "op": "app_global_get_ex",
      "stack_out": [
        "asaDue#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1291": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asaDue#0",
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "1292": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asaDue#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asaDue#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1294": {
      "op": "pop",
      "stack_out": [
        "asaDue#0",
        "tmp%8#0"
      ]
    },
    "1295": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#0",
        "asaDue#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "asaDue#0",
        "tmp%8#0",
        "asaDue#0 (copy)"
      ]
    },
    "1297": {
      "op": ">=",
      "defined_out": [
        "asaDue#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asaDue#0",
        "tmp%10#0"
      ]
    },
    "1298": {
      "op": "assert",
      "stack_out": [
        "asaDue#0"
      ]
    },
    "1299": {
      "op": "itxn_begin"
    },
    "1300": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1303": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1305": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1306": {
      "op": "uncover 2",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "asaDue#0"
      ]
    },
    "1308": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1310": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1312": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1314": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1315": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1317": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1318": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1320": {
      "op": "itxn_submit"
    },
    "1321": {
      "retsub": true,
      "op": "retsub"
    },
    "1322": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1323": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "1326": {
      "subroutine": "smart_contracts/we_lend/contract.algo.ts::WeLend.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1329": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0"
      ]
    },
    "1330": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1332": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%0#0"
      ]
    },
    "1334": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1336": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "1337": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateral#0"
      ]
    },
    "1338": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateral#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1340": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "collateralDeposit#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0"
      ]
    },
    "1342": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1343": {
      "block": "borrow_while_top@5",
      "stack_in": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1344": {
      "op": "bytec 4 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1347": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "1348": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1350": {
      "op": "dup"
    },
    "1351": {
      "op": "uncover 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "1353": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "1354": {
      "error": "Collateral not found",
      "op": "assert // Collateral not found",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1355": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1356": {
      "op": "bytec 9 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1359": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "1360": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1361": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "collateral#0"
      ]
    },
    "1362": {
      "op": "dup",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "1363": {
      "op": "cover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0",
        "collateral#0"
      ]
    },
    "1365": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1367": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0"
      ]
    },
    "1368": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "0"
      ]
    },
    "1369": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#1"
      ]
    },
    "1370": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0 (copy)",
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#1",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1372": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#1",
        "tmp%4#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#1",
        "tmp%4#1"
      ]
    },
    "1373": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1374": {
      "op": "bz borrow_after_if_else@7",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1377": {
      "op": "itxn_begin"
    },
    "1378": {
      "op": "bytec 10 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "1380": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1382": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateral#0",
        "i#0",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "lstApp#0 (copy)"
      ]
    },
    "1384": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1386": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "appl"
      ]
    },
    "1388": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1390": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1391": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1393": {
      "op": "itxn_submit"
    },
    "1394": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0"
      ]
    },
    "1396": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1397": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1400": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "awst_tmp%0#0"
      ]
    },
    "1401": {
      "op": "extract 0 4",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1404": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateral#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1405": {
      "op": "==",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1406": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1407": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1408": {
      "op": "itxn_begin"
    },
    "1409": {
      "op": "bytec 11 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "1411": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1413": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "1415": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1417": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "1419": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1421": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "1422": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1424": {
      "op": "itxn_submit"
    },
    "1425": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "1427": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1428": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "1431": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "awst_tmp%1#0"
      ]
    },
    "1432": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1435": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1436": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1437": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0"
      ]
    },
    "1438": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "1439": {
      "op": "frame_dig 1",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralDeposit#0"
      ]
    },
    "1441": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "collateralDeposit#0",
        "hiCollateral#0",
        "i#0",
        "loCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "hiCollateral#0",
        "loCollateral#0"
      ]
    },
    "1442": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "hiCollateral#0",
        "loCollateral#0",
        "circulatingExternalLST#0"
      ]
    },
    "1444": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0"
      ]
    },
    "1445": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0",
        "collateral#0"
      ]
    },
    "1447": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0",
        "collateral#0",
        "8"
      ]
    },
    "1449": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%12#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0",
        "tmp%12#0"
      ]
    },
    "1450": {
      "callsub": "smart_contracts/we_lend/contract.algo.ts::WeLend.getPricesFromOracles",
      "op": "callsub getPricesFromOracles",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "oraclePrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0",
        "oraclePrice#0"
      ]
    },
    "1453": {
      "op": "mulw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "i#0",
        "loUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "hiUSD#0",
        "loUSD#0"
      ]
    },
    "1454": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "1000000",
        "collateral#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "i#0",
        "loUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "hiUSD#0",
        "loUSD#0",
        "1000000"
      ]
    },
    "1458": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralUSD#0"
      ]
    },
    "1459": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "1460": {
      "op": "bytec 12 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "1462": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1463": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "1464": {
      "op": "*",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "1465": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0",
        "10000"
      ]
    },
    "1466": {
      "op": "/",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0"
      ]
    },
    "1467": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1469": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%14#0"
      ]
    },
    "1470": {
      "op": "assert",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1472": {
      "op": "bytec 13 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "1474": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1475": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "1476": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%1#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1478": {
      "op": "*",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%15#0"
      ]
    },
    "1479": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%15#0",
        "10000"
      ]
    },
    "1480": {
      "op": "/",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "fee#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "fee#0"
      ]
    },
    "1481": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "fee#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1483": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "requestedLoanAmount#0 (copy)",
        "fee#0"
      ]
    },
    "1484": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0"
      ]
    },
    "1485": {
      "op": "itxn_begin"
    },
    "1486": {
      "op": "txn Sender",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1488": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1489": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1490": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1491": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1492": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "disbursement#0"
      ]
    },
    "1494": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1496": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1498": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1500": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "4"
      ]
    },
    "1501": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1504": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1506": {
      "op": "itxn_submit"
    },
    "1507": {
      "retsub": true,
      "op": "retsub"
    },
    "1508": {
      "block": "borrow_after_if_else@7",
      "stack_in": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1510": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1511": {
      "op": "+",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1512": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1514": {
      "op": "b borrow_while_top@5"
    }
  }
}