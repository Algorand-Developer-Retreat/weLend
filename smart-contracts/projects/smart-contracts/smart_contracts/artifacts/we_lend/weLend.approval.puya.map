{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/weLend/smart-contracts/projects/smart-contracts/smart_contracts/we_lend/weLendContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2ZE;;AAAA;AAAA;AAAA;;AAAA;AA3ZF;;;AAAA;AAAA;;AA2ZE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAvZF;;;AAAA;AAAA;;AAuZE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAzGC;;AAAA;AAAA;AAAA;;AAAA;AA9SH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AA8SG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAxRH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAwRG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA/PH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AA+PG;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AAnNH;;;AAAA;;;AAmNG;;;AAAA;;AAjCD;;AAAA;AAAA;AAAA;;AAAA;AAlLF;;;AAAA;AAkLE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AA9IF;;;AAAA;AAAA;;;AAAA;AA8IE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAlHF;;;AAAA;;;AAkHE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/CC;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAmDG;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA7CH;;;AAAA;AAAA;;AAAA;;;AAAA;AA6CG;;;AAAA;;AAAD;;;AA9BA;;AAgCE;;AAAA;AAC2B;;AAAA;AA7C7B;AA6CE;AAAA;;AAGF;;;AAQgB;;AA5ChB;AAAA;;AAAA;AAAA;AA4CS;AAAP;AAEA;;AAAA;;AA9CF;AAAA;;AAAA;AAAA;AA8CE;AAAA;;;AAAA;;AAAA;;AAEU;;;;AAFV;AAAA;;;;AAAA;AA3CF;;AAgDE;;AAAA;AA7CF;;;;;;;;;;;;;;;;;;;AA8CE;;AAAA;AA3CF;;;;;;;;;;;;;;AA4CE;;AAAA;AAzCF;;AA0CE;;AAAA;AA7BF;AA8BkC;AAAhC;AA3BF;AA4B0C;AAAxC;AAGA;AAE0B;;AAzE5B;AAAA;AAAA;AAAA;AA0E0C;AACvB;;;;;;;AAJjB;;;AAAA;;;AAAA;AAvEF;AAAA;AAAA;AAAA;AAgFmD;AAClC;AAEI;;AACE;;AAAA;;AAAA;AACG;;AAAA;;AAAA;AAEJ;;AACiB;;AAAA;;AAAA;AAAvB;;;AAAA;AAAA;AAxFhB;AAAA;AAAA;AAAA;AAyFiB;;;AAAA;AAAA;;;;;;;AAHI;;;;;;;;;AALJ;;;;AAAA;;;AAAA;;;AAWW;AAzF5B;;AAyFE;AAAA;;;;;;AAtFF;AAAA;;AAAA;AAAA;AA0FE;AAvFF;AAAA;;AAAA;AAAA;AA2FE;AA/DF;AAAA;AAAA;AAAA;AAmEE;AAhEF;AAAA;AAAA;AAAA;AAoEE;AAGF;;;AACgB;;AApGhB;AAAA;;AAAA;AAAA;AAoGS;AAAP;AAGgB;;AAAA;AAFoD;;AAAA;;AAG5D;;AAH4D;AAAA;AAAA;AAKA;;AAAA;;AAG5D;;AAH4D;AAAA;AAAA;AAKO;;AAAA;AAGnE;;AAHmE;AAAA;AAQ9C;;AAAA;AACA;;AAAA;AACG;;AAAA;AALN;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AA3F5B;AAAA;AAAA;AAAA;AAkGqE;AAAhC;AAAjB;AA5GgC;;AAAA;AAAA;AA4GlD;AAAA;AAlGF;AAAA;AAAA;AAAA;AAmGkE;AAAhC;AAnGlC;AAmGE;AAAA;;AAGF;;;AACmC;;AAAA;AAjHiB;;AAAA;AAAA;AAiHc;AAAA;AAAA;AAAA;;AAAA;AAC1D;AAAiB;;;AAAjB;AAAA;;AACuB;;AAEsB;AAA7C;AAAA;;AAE+B;AAAgE;;;;;;;;;;;;AAAhE;AAAA;AAAA;;AAI7B;;AAH4D;AAAA;AAAA;;AAMhE;;AAAA;AAAJ;;;AAC+B;;AAAA;AAGrB;;AAHqB;AAAA;AAczB;;AAAA;AAA2B;;AAA6B;AACxD;;AAAA;AAAoB;AACwD;AAA1B;;AAA0B;AAA5E;;AAAA;AAAqB;AACrB;AAA8B;AACpC;;AAAA;AAX+B;;AAAA;AAGrB;;AAHqB;AAAA;;;;AAcjC;;;AA1IA;AAAA;AAAA;AAAA;AA4I2B;AACJ;AAAG;;AAAA;;AAAA;AAAxB;;;AACmC;;AAAA;AAAA;AAxJe;;AAAA;AAAA;AAwJM;AAAA;;AAAA;AAGhD;;AAAA;;AAAQ;;;AACd;;AAAA;AAAA;;AALuC;AAAA;AAAA;;;;;AAOpB;;AAAc;AAAd;AAAd;;AAAA;AAAA;AAAP;;AAAA;AAuBF;;;AAhNA;AAAA;AAAA;AAAA;AAkNmD;AACnC;;AAvMhB;AAAA;;AAAA;AAAA;AAuMS;AAAP;AACyB;;AAAA;AAAA;AAAA;;AAAlB;;AAAA;AAAP;AACmB;;AAAA;AAAZ;AAAP;AAxBqB;AArJvB;AAAA;AAAA;AAAA;AAqJ0B;;AAAA;AAAxB;;;AAC+C;;AAAA;AAhKuB;;AAAA;AAAA;AAgKF;AAAA;AACnD;AAAQ;AAAnB;;AAAA;AAAJ;;;AACS;AAsBJ;AAAP;AAEkD;;AAAA;;AAAA;AAhLpD;AAAA;AAAA;AAAA;AAoLqF;AAAxC;AAAjB;AA9L4C;;AAAA;AAAA;AA8LtE;AAAA;AApLF;AAAA;AAAA;AAAA;AAsLkF;AAAxC;AAtL1C;AAsLE;AAAA;AACA;AAEmB;;AACO;AAET;;;;;;;;;;;AALjB;;;AAAA;;;AAAA;;AAlCmE;;AAAA;AAAA;AAAA;;;;;AAM5D;AAmBC;;;AAsCV;;;AA5PA;AAAA;AAAA;AAAA;AA8PmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAO2D;;AAtQ7D;AAAA;AAAA;AAAA;AAsQiH;AAAxF;;AAAjB;AACN;;;;;AAKA;AAE0B;;AA3Q5B;AAAA;;AAAA;AAAA;AA4QyC;;;;;;;;;AAHvC;;;AAAA;;;AAAA;;AAtQF;AAAA;;AAAA;AAAA;AAoOiE;AAAjC;AAjOhC;AAAA;;AAAA;AAAA;AAmOmB;AAEa;;AAAA;AACG;AAA1B;;;;;;;;AAsCT;;;AArRA;AAAA;AAAA;AAAA;AAuRmD;AACjD;;AAAA;;AACwB;;AADxB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AA/QF;AAAA;;AAAA;AAAA;AA2OgE;AAAhC;AA9OhC;AAAA;;AAAA;AAAA;AAgPmB;AAEa;;AAAA;AACG;AAA1B;AAwCoC;;AAjS7C;AAAA;AAAA;AAAA;AAiSiG;AAAxF;;AAAA;AAAA;;AAAA;AAAP;AACA;AAE0B;;AApS5B;AAAA;AAAA;AAAA;AAqS0C;;;;;;;;;AAHxC;;;AAAA;;;AAAA;;;;;;AASF;;;;AASE;;AAAA;;AACwB;;AADxB;AAAA;AAKM;;AAA6C;;AAlH9B;AA/JvB;AAAA;AAAA;AAAA;AA+J0B;;AAAA;AAAA;;AAAA;AAAxB;AAC+C;AA1KuB;;AAAA;AAAA;AA0KF;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACnD;AAAQ;AAA6B;;AAAA;AAAhD;AAAJ;;;AAuH6B;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAGD;AAAA;;;;;;;;AAAA;;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAIO;;AAAA;AAAA;;AAAA;AAC/B;;AAA+B;AAGgD;;AAAZ;;AAAY;AAAzD;;;AAEL;AAC0B;AAAnB;AA/ThC;AAAA;;AAAA;AAAA;AAiUgC;AAAsC;AAAvC;AAEtB;;AAAA;AAAP;AA1TF;AAAA;;AAAA;AAAA;AA4TuB;;AAAA;AAAwD;AAAzD;AACd;;AAAA;AAAuB;AArV/B;AAAA;AAAA;AAAA;AAsV2F;AAAtD;;AAAA;AACR;;AAArB;AAAqB;AACA;;AAAA;AACD;;AAIF;AAHE;;AAMa;AAE6C;;AAkBtE;AAEC;;;AAAA;;AAAA;AAAA;AAAwC;;;AAAxC;AAtXjB;AAAA;AAAA;AAAA;AAsXiB;AAET;;AACA;;AADA;AAAA;;AAAA;AAGA;;AAHA;AAIO;;AAAA;AAJP;AAAA;;AAAA;AAKA;;AALA;AAM0B;;AAAnB;AANP;AAOc;;AAGD;AAlYrB;AAAA;AAAA;AAAA;AAmYgB;;AAAA;AAAA;;;;;;;;;;;;;AAHA;;;;;;;;;;AAZA;;;;AAAA;;;AAAA;;;AAuBM;;AAAA;AACJ;;AAAA;AA5YlB;AAAA;AAAA;AAAA;AA+YqB;;AAAA;AAPY;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAxWuB;;AAAA;;AAAA;AAiXtD;AAAA;AA7CA;AAE0B;;AAtW5B;AAAA;AAAA;AAAA;AAuW0C;;;;;;;;;AAHxC;;;AAAA;;;AAAA;;AA7JmE;;AAAA;AAAA;AAAA;;;;;AA6MrE;;;AApXwD;;AAAA;;AAAA;AAqXZ;AAAA;AAA1C;AAGF;;;AAxXwD;;AAAA;;AAAA;AAyXZ;AAAA;AAAM;;AAAgB;AAAhE",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 10000 4294967296"
    },
    "13": {
      "op": "bytecblock \"base_token_id\" 0x151f7c75 \"accepted_collaterals_count\" \"oracle_pools_count\" \"admin_account\" \"circulating_lst\" \"total_deposits\" \"oracle_pools\" \"accepted_collaterals\" \":\" \"loan_records\" 0x09ef525f 0xae859f3b \"ltv_bps\" \"origination_fee_bps\" \"lst_token_id\" \"asset_1_cumulative_price\" \"asset_2_cumulative_price\" \"cumulative_price_update_timestamp\""
    },
    "309": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "311": {
      "op": "bz main_after_if_else@21",
      "stack_out": []
    },
    "314": {
      "op": "pushbytess 0x3b01665e 0x6e01402e // method \"createApplication(account,uint64)void\", method \"initApplication(pay,uint64,uint64,uint64,uint64)void\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ]
    },
    "326": {
      "op": "bytec 11 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "328": {
      "op": "bytec 12 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "330": {
      "op": "pushbytess 0x8925c50f 0x6c6337c0 0x31274359 0x8bbde2aa 0xd4bfb233 0xb014f687 0x3acbfb6f 0xf445489b 0xd501c95d 0x00ff161e 0xabaf9805 // method \"getOraclePoolsCount()uint64\", method \"getAcceptedCollateralsCount()uint64\", method \"addOraclePool(address,uint64)void\", method \"getOraclePrice(uint64,uint64)uint64\", method \"getPricesFromOracles(uint64)uint64\", method \"addNewCollateralType(uint64,uint64)void\", method \"depositASA(axfer,uint64)void\", method \"withdrawDeposit(axfer,uint64)void\", method \"borrow(axfer,uint64,uint64,uint64)void\", method \"getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getLoanRecordASAId(account)uint64\"",
      "defined_out": [
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getLoanRecordASAId(account)uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getLoanRecordASAId(account)uint64)"
      ]
    },
    "387": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(createApplication(account,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(getCirculatingLST()uint64)",
        "Method(getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getLoanRecordASAId(account)uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(account,uint64)void)",
        "Method(initApplication(pay,uint64,uint64,uint64,uint64)void)",
        "Method(getCirculatingLST()uint64)",
        "Method(getTotalDeposits()uint64)",
        "Method(getOraclePoolsCount()uint64)",
        "Method(getAcceptedCollateralsCount()uint64)",
        "Method(addOraclePool(address,uint64)void)",
        "Method(getOraclePrice(uint64,uint64)uint64)",
        "Method(getPricesFromOracles(uint64)uint64)",
        "Method(addNewCollateralType(uint64,uint64)void)",
        "Method(depositASA(axfer,uint64)void)",
        "Method(withdrawDeposit(axfer,uint64)void)",
        "Method(borrow(axfer,uint64,uint64,uint64)void)",
        "Method(getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getLoanRecordASAId(account)uint64)",
        "tmp%2#0"
      ]
    },
    "390": {
      "op": "match main_createApplication_route@3 main_initApplication_route@4 main_getCirculatingLST_route@5 main_getTotalDeposits_route@6 main_getOraclePoolsCount_route@7 main_getAcceptedCollateralsCount_route@8 main_addOraclePool_route@9 main_getOraclePrice_route@10 main_getPricesFromOracles_route@11 main_addNewCollateralType_route@12 main_depositASA_route@13 main_withdrawDeposit_route@14 main_borrow_route@15 main_getLoanRecord_route@16 main_getLoanRecordASAId_route@17",
      "stack_out": []
    },
    "422": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "423": {
      "op": "return",
      "stack_out": []
    },
    "424": {
      "block": "main_getLoanRecordASAId_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "426": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "427": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "428": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "430": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "431": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "434": {
      "op": "btoi",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "435": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "437": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getLoanRecordASAId",
      "op": "callsub getLoanRecordASAId",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "440": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "441": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "442": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "443": {
      "op": "concat",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "444": {
      "op": "log",
      "stack_out": []
    },
    "445": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "446": {
      "op": "return",
      "stack_out": []
    },
    "447": {
      "block": "main_getLoanRecord_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "449": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "450": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "451": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "453": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "454": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "457": {
      "op": "btoi",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "458": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "460": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getLoanRecord",
      "op": "callsub getLoanRecord",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "463": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "0x151f7c75"
      ]
    },
    "464": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%85#0"
      ]
    },
    "465": {
      "op": "concat",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "466": {
      "op": "log",
      "stack_out": []
    },
    "467": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "return",
      "stack_out": []
    },
    "469": {
      "block": "main_borrow_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "471": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "472": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "473": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "475": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "476": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "478": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0",
        "1"
      ]
    },
    "479": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "480": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "481": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "483": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "484": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "485": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "486": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "489": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%77#0"
      ]
    },
    "490": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%14#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%77#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "493": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%3#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "494": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%3#0",
        "reinterpret_bytes[8]%15#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "tmp%77#0",
        "tmp%78#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "497": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.borrow",
      "op": "callsub borrow",
      "stack_out": []
    },
    "500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "return",
      "stack_out": []
    },
    "502": {
      "block": "main_withdrawDeposit_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "504": {
      "op": "!",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "511": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "1"
      ]
    },
    "512": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "513": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "514": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "516": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "518": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "519": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "522": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "tmp%71#0"
      ]
    },
    "523": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.withdrawDeposit",
      "op": "callsub withdrawDeposit",
      "stack_out": []
    },
    "526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "block": "main_depositASA_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "530": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "535": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "537": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0",
        "1"
      ]
    },
    "538": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "539": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "540": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "542": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "544": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "545": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "548": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "tmp%65#0"
      ]
    },
    "549": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.depositASA",
      "op": "callsub depositASA",
      "stack_out": []
    },
    "552": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "return",
      "stack_out": []
    },
    "554": {
      "block": "main_addNewCollateralType_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "557": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "558": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "560": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "561": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "564": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "567": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.addNewCollateralType",
      "op": "callsub addNewCollateralType",
      "stack_out": []
    },
    "570": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "571": {
      "op": "return",
      "stack_out": []
    },
    "572": {
      "block": "main_getPricesFromOracles_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "574": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "575": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "576": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "578": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "579": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "582": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "583": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getPricesFromOracles",
      "op": "callsub getPricesFromOracles",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "586": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "587": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "588": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "589": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "590": {
      "op": "log",
      "stack_out": []
    },
    "591": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "592": {
      "op": "return",
      "stack_out": []
    },
    "593": {
      "block": "main_getOraclePrice_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "595": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "596": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "597": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "599": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "600": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "603": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "604": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "607": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%47#0",
        "tmp%48#0"
      ]
    },
    "608": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "611": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "612": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "614": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "615": {
      "op": "log",
      "stack_out": []
    },
    "616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "617": {
      "op": "return",
      "stack_out": []
    },
    "618": {
      "block": "main_addOraclePool_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "620": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "625": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "628": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "631": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.addOraclePool",
      "op": "callsub addOraclePool",
      "stack_out": []
    },
    "634": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "635": {
      "op": "return",
      "stack_out": []
    },
    "636": {
      "block": "main_getAcceptedCollateralsCount_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "638": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "639": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "640": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "642": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "643": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getAcceptedCollateralsCount",
      "op": "callsub getAcceptedCollateralsCount",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "646": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "647": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "649": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "650": {
      "op": "log",
      "stack_out": []
    },
    "651": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "652": {
      "op": "return",
      "stack_out": []
    },
    "653": {
      "block": "main_getOraclePoolsCount_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "655": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "656": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "657": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "659": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "660": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getOraclePoolsCount",
      "op": "callsub getOraclePoolsCount",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "663": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "664": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "665": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "666": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "667": {
      "op": "log",
      "stack_out": []
    },
    "668": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "669": {
      "op": "return",
      "stack_out": []
    },
    "670": {
      "block": "main_getTotalDeposits_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "672": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "673": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "674": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "676": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "677": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getTotalDeposits",
      "op": "callsub getTotalDeposits",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "680": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "681": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "682": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "683": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "684": {
      "op": "log",
      "stack_out": []
    },
    "685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": []
    },
    "687": {
      "block": "main_getCirculatingLST_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "689": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "690": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "691": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "693": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "694": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getCirculatingLST",
      "op": "callsub getCirculatingLST",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "697": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "698": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "699": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "701": {
      "op": "log",
      "stack_out": []
    },
    "702": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "703": {
      "op": "return",
      "stack_out": []
    },
    "704": {
      "block": "main_initApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "706": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "707": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "708": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "710": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "711": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "713": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "1"
      ]
    },
    "714": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "715": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "716": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "718": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "719": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "720": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "721": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "724": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0"
      ]
    },
    "725": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "728": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "729": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%3#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "732": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "733": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%4#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "736": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "737": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.initApplication",
      "op": "callsub initApplication",
      "stack_out": []
    },
    "740": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "op": "return",
      "stack_out": []
    },
    "742": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "744": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "745": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "746": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "748": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "749": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "750": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "753": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "754": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "756": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "759": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "760": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "763": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "return",
      "stack_out": []
    },
    "765": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.createApplication",
      "params": {
        "admin#0": "bytes",
        "baseTokenId#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "768": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\""
      ],
      "stack_out": [
        "\"admin_account\""
      ]
    },
    "770": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin_account\"",
        "admin#0 (copy)"
      ]
    },
    "772": {
      "op": "app_global_put",
      "stack_out": []
    },
    "773": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseTokenId#0 (copy)"
      ]
    },
    "775": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "776": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"base_token_id\""
      ]
    },
    "777": {
      "op": "swap",
      "stack_out": [
        "\"base_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "778": {
      "op": "app_global_put",
      "stack_out": []
    },
    "779": {
      "retsub": true,
      "op": "retsub"
    },
    "780": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.initApplication",
      "params": {
        "mbrTxn#0": "uint64",
        "ltv_bps#0": "uint64",
        "liq_threshold_bps#0": "uint64",
        "interest_bps#0": "uint64",
        "origination_fee_bps#0": "uint64"
      },
      "block": "initApplication",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "783": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "786": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "788": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "789": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "790": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "791": {
      "op": "assert",
      "stack_out": []
    },
    "792": {
      "op": "frame_dig -5",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "794": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "796": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "797": {
      "op": "bytec 4 // \"admin_account\"",
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin_account\""
      ]
    },
    "799": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "800": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "801": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "802": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "805": {
      "op": "frame_dig -5",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "807": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "809": {
      "op": "pushint 34000 // 34000",
      "defined_out": [
        "34000",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "34000"
      ]
    },
    "813": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "814": {
      "op": "bz initApplication_bool_false@3",
      "stack_out": []
    },
    "817": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "818": {
      "block": "initApplication_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": []
    },
    "819": {
      "op": "bytec 13 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\""
      ],
      "stack_out": [
        "\"ltv_bps\""
      ]
    },
    "821": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ],
      "stack_out": [
        "\"ltv_bps\"",
        "ltv_bps#0 (copy)"
      ]
    },
    "823": {
      "op": "app_global_put",
      "stack_out": []
    },
    "824": {
      "op": "pushbytes \"liq_threshold_bps\"",
      "defined_out": [
        "\"liq_threshold_bps\""
      ],
      "stack_out": [
        "\"liq_threshold_bps\""
      ]
    },
    "843": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ],
      "stack_out": [
        "\"liq_threshold_bps\"",
        "liq_threshold_bps#0 (copy)"
      ]
    },
    "845": {
      "op": "app_global_put",
      "stack_out": []
    },
    "846": {
      "op": "pushbytes \"interest_bps\"",
      "defined_out": [
        "\"interest_bps\""
      ],
      "stack_out": [
        "\"interest_bps\""
      ]
    },
    "860": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ],
      "stack_out": [
        "\"interest_bps\"",
        "interest_bps#0 (copy)"
      ]
    },
    "862": {
      "op": "app_global_put",
      "stack_out": []
    },
    "863": {
      "op": "bytec 14 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\""
      ],
      "stack_out": [
        "\"origination_fee_bps\""
      ]
    },
    "865": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ],
      "stack_out": [
        "\"origination_fee_bps\"",
        "origination_fee_bps#0 (copy)"
      ]
    },
    "867": {
      "op": "app_global_put",
      "stack_out": []
    },
    "868": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\""
      ],
      "stack_out": [
        "\"oracle_pools_count\""
      ]
    },
    "869": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "\"oracle_pools_count\"",
        "0"
      ]
    },
    "870": {
      "op": "app_global_put",
      "stack_out": []
    },
    "871": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\""
      ],
      "stack_out": [
        "\"accepted_collaterals_count\""
      ]
    },
    "872": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ]
    },
    "873": {
      "op": "app_global_put",
      "stack_out": []
    },
    "874": {
      "op": "itxn_begin"
    },
    "875": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "877": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "878": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "879": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "880": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "881": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "882": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "0"
      ]
    },
    "883": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "885": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "887": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "889": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "890": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "892": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "893": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "895": {
      "op": "itxn_submit"
    },
    "896": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "897": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "899": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "900": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "901": {
      "op": "itxn_begin"
    },
    "902": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "904": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "baseToken#0 (copy)"
      ]
    },
    "906": {
      "op": "asset_params_get AssetTotal",
      "defined_out": [
        "baseToken#0",
        "check%0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "908": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "909": {
      "op": "dig 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "baseToken#0 (copy)"
      ]
    },
    "911": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "baseToken#0",
        "check%1#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "913": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "914": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "916": {
      "op": "uncover 4",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "baseToken#0"
      ]
    },
    "918": {
      "op": "asset_params_get AssetUnitName",
      "defined_out": [
        "check%2#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "920": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0"
      ]
    },
    "921": {
      "op": "pushbytes \"c\"",
      "defined_out": [
        "\"c\"",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "value%2#0",
        "\"c\""
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "\"c\"",
        "value%2#0"
      ]
    },
    "925": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "926": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "0"
      ]
    },
    "927": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "928": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "929": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%4#0"
      ]
    },
    "930": {
      "op": "pushbytes \"c\"",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "maybe_value%4#0",
        "\"c\""
      ]
    },
    "933": {
      "op": "swap",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "\"c\"",
        "maybe_value%4#0"
      ]
    },
    "934": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "935": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "937": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "939": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "941": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0",
        "0"
      ]
    },
    "942": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "944": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "value%0#0"
      ]
    },
    "946": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "948": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "950": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "952": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "954": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "955": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "957": {
      "op": "itxn_submit"
    },
    "958": {
      "op": "itxn ConfigAsset",
      "defined_out": [
        "result.ConfigAsset#0"
      ],
      "stack_out": [
        "result.ConfigAsset#0"
      ]
    },
    "960": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "961": {
      "op": "bytec 15 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"lst_token_id\""
      ]
    },
    "963": {
      "op": "swap",
      "stack_out": [
        "\"lst_token_id\"",
        "val_as_bytes%0#0"
      ]
    },
    "964": {
      "op": "app_global_put",
      "stack_out": []
    },
    "965": {
      "retsub": true,
      "op": "retsub"
    },
    "966": {
      "block": "initApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "967": {
      "op": "b initApplication_bool_merge@4"
    },
    "970": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getCirculatingLST",
      "params": {},
      "block": "getCirculatingLST",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "971": {
      "op": "bytec 5 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"circulating_lst\""
      ]
    },
    "973": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "974": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "975": {
      "retsub": true,
      "op": "retsub"
    },
    "976": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getTotalDeposits",
      "params": {},
      "block": "getTotalDeposits",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "977": {
      "op": "bytec 6 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_deposits\""
      ]
    },
    "979": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "980": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "981": {
      "retsub": true,
      "op": "retsub"
    },
    "982": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getOraclePoolsCount",
      "params": {},
      "block": "getOraclePoolsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "983": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "984": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "985": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "986": {
      "retsub": true,
      "op": "retsub"
    },
    "987": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getAcceptedCollateralsCount",
      "params": {},
      "block": "getAcceptedCollateralsCount",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "988": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "991": {
      "retsub": true,
      "op": "retsub"
    },
    "992": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.addOraclePool",
      "params": {
        "poolAddress#0": "bytes",
        "contractAppId#0": "bytes"
      },
      "block": "addOraclePool",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "995": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "997": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "998": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1001": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1002": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1003": {
      "op": "assert",
      "stack_out": []
    },
    "1004": {
      "op": "frame_dig -1",
      "defined_out": [
        "contractAppId#0 (copy)"
      ],
      "stack_out": [
        "contractAppId#0 (copy)"
      ]
    },
    "1006": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1007": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolAddress#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "poolAddress#0 (copy)"
      ]
    },
    "1009": {
      "op": "dig 1",
      "defined_out": [
        "poolAddress#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "poolAddress#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "1011": {
      "op": "bytec 16 // \"asset_1_cumulative_price\"",
      "defined_out": [
        "\"asset_1_cumulative_price\"",
        "poolAddress#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "poolAddress#0 (copy)",
        "tmp%2#0 (copy)",
        "\"asset_1_cumulative_price\""
      ]
    },
    "1013": {
      "op": "app_local_get_ex",
      "defined_out": [
        "tmp%2#0",
        "token_1_cumulative_price#0",
        "token_1_cumulative_price_exists#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "token_1_cumulative_price#0",
        "token_1_cumulative_price_exists#0"
      ]
    },
    "1014": {
      "op": "pop",
      "stack_out": [
        "tmp%2#0",
        "token_1_cumulative_price#0"
      ]
    },
    "1015": {
      "op": "swap",
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0"
      ]
    },
    "1016": {
      "op": "frame_dig -2",
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0",
        "poolAddress#0 (copy)"
      ]
    },
    "1018": {
      "op": "dig 1",
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0",
        "poolAddress#0 (copy)",
        "tmp%2#0 (copy)"
      ]
    },
    "1020": {
      "op": "bytec 17 // \"asset_2_cumulative_price\"",
      "defined_out": [
        "\"asset_2_cumulative_price\"",
        "poolAddress#0 (copy)",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "token_1_cumulative_price#0"
      ],
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0",
        "poolAddress#0 (copy)",
        "tmp%2#0 (copy)",
        "\"asset_2_cumulative_price\""
      ]
    },
    "1022": {
      "op": "app_local_get_ex",
      "defined_out": [
        "tmp%2#0",
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "token_2_cumulative_price_exists#0"
      ],
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0",
        "token_2_cumulative_price#0",
        "token_2_cumulative_price_exists#0"
      ]
    },
    "1023": {
      "op": "pop",
      "stack_out": [
        "token_1_cumulative_price#0",
        "tmp%2#0",
        "token_2_cumulative_price#0"
      ]
    },
    "1024": {
      "op": "swap",
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "tmp%2#0"
      ]
    },
    "1025": {
      "op": "frame_dig -2",
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "tmp%2#0",
        "poolAddress#0 (copy)"
      ]
    },
    "1027": {
      "op": "swap",
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "poolAddress#0 (copy)",
        "tmp%2#0"
      ]
    },
    "1028": {
      "op": "bytec 18 // \"cumulative_price_update_timestamp\"",
      "defined_out": [
        "\"cumulative_price_update_timestamp\"",
        "poolAddress#0 (copy)",
        "tmp%2#0",
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0"
      ],
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "poolAddress#0 (copy)",
        "tmp%2#0",
        "\"cumulative_price_update_timestamp\""
      ]
    },
    "1030": {
      "op": "app_local_get_ex",
      "defined_out": [
        "cumulativePriceLastTimestamp#0",
        "cumulativePriceLastTimestampExists#0",
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0"
      ],
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "cumulativePriceLastTimestamp#0",
        "cumulativePriceLastTimestampExists#0"
      ]
    },
    "1031": {
      "op": "pop",
      "stack_out": [
        "token_1_cumulative_price#0",
        "token_2_cumulative_price#0",
        "cumulativePriceLastTimestamp#0"
      ]
    },
    "1032": {
      "op": "uncover 2",
      "stack_out": [
        "token_2_cumulative_price#0",
        "cumulativePriceLastTimestamp#0",
        "token_1_cumulative_price#0"
      ]
    },
    "1034": {
      "op": "itob",
      "defined_out": [
        "cumulativePriceLastTimestamp#0",
        "token_2_cumulative_price#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "token_2_cumulative_price#0",
        "cumulativePriceLastTimestamp#0",
        "val_as_bytes%0#0"
      ]
    },
    "1035": {
      "op": "uncover 2",
      "stack_out": [
        "cumulativePriceLastTimestamp#0",
        "val_as_bytes%0#0",
        "token_2_cumulative_price#0"
      ]
    },
    "1037": {
      "op": "itob",
      "defined_out": [
        "cumulativePriceLastTimestamp#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "cumulativePriceLastTimestamp#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1038": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "cumulativePriceLastTimestamp#0"
      ]
    },
    "1040": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "1041": {
      "op": "frame_dig -2",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "poolAddress#0 (copy)"
      ]
    },
    "1043": {
      "op": "frame_dig -1",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "poolAddress#0 (copy)",
        "contractAppId#0 (copy)"
      ]
    },
    "1045": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1046": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "1048": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1049": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "1051": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "1053": {
      "op": "concat",
      "defined_out": [
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0"
      ]
    },
    "1054": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newOracle#0",
        "0"
      ]
    },
    "1055": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "1056": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1057": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0"
      ]
    },
    "1058": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0",
        "newOracle#0"
      ],
      "stack_out": [
        "newOracle#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1059": {
      "op": "+",
      "defined_out": [
        "newOracle#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "newOracle#0",
        "to_encode%0#0"
      ]
    },
    "1060": {
      "op": "itob",
      "defined_out": [
        "newOracle#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "newOracle#0",
        "val_as_bytes%3#0"
      ]
    },
    "1061": {
      "op": "bytec 7 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "newOracle#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "newOracle#0",
        "val_as_bytes%3#0",
        "\"oracle_pools\""
      ]
    },
    "1063": {
      "op": "swap",
      "stack_out": [
        "newOracle#0",
        "\"oracle_pools\"",
        "val_as_bytes%3#0"
      ]
    },
    "1064": {
      "op": "concat",
      "defined_out": [
        "newOracle#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newOracle#0",
        "tmp%5#0"
      ]
    },
    "1065": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "newOracle#0"
      ]
    },
    "1066": {
      "op": "box_put",
      "stack_out": []
    },
    "1067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1068": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "1069": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1070": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1071": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1072": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1073": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"oracle_pools_count\""
      ]
    },
    "1074": {
      "op": "swap",
      "stack_out": [
        "\"oracle_pools_count\"",
        "new_state_value%0#0"
      ]
    },
    "1075": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1076": {
      "retsub": true,
      "op": "retsub"
    },
    "1077": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getOraclePrice",
      "params": {
        "tokenId#0": "uint64",
        "oracleIndex#0": "uint64"
      },
      "block": "getOraclePrice",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1080": {
      "op": "frame_dig -1",
      "defined_out": [
        "oracleIndex#0 (copy)"
      ],
      "stack_out": [
        "oracleIndex#0 (copy)"
      ]
    },
    "1082": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1083": {
      "op": "bytec 7 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"oracle_pools\""
      ]
    },
    "1085": {
      "op": "swap",
      "stack_out": [
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ]
    },
    "1086": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1087": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "1088": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ]
    },
    "1089": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "1090": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0",
        "maybe_exists%0#0"
      ]
    },
    "1092": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "oracle#0",
        "oracle#0"
      ]
    },
    "1093": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "1094": {
      "error": "Index access is out of bounds",
      "op": "extract 0 32 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "oracle#0",
        "address#0"
      ]
    },
    "1097": {
      "op": "dup",
      "stack_out": [
        "oracle#0",
        "oracle#0",
        "address#0",
        "address#0 (copy)"
      ]
    },
    "1098": {
      "op": "uncover 2",
      "defined_out": [
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "address#0",
        "oracle#0"
      ]
    },
    "1100": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "address#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "address#0",
        "oracle#0",
        "32"
      ]
    },
    "1102": {
      "op": "extract_uint64",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "1103": {
      "op": "dup",
      "stack_out": [
        "oracle#0",
        "address#0",
        "address#0",
        "contractAppIdObj#0",
        "contractAppIdObj#0"
      ]
    },
    "1104": {
      "op": "cover 2",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "1106": {
      "op": "dup2",
      "defined_out": [
        "address#0",
        "address#0 (copy)",
        "contractAppIdObj#0",
        "contractAppIdObj#0 (copy)",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0 (copy)",
        "contractAppIdObj#0 (copy)"
      ]
    },
    "1107": {
      "op": "pushbytes \"asset_1_id\"",
      "defined_out": [
        "\"asset_1_id\"",
        "address#0",
        "address#0 (copy)",
        "contractAppIdObj#0",
        "contractAppIdObj#0 (copy)",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0 (copy)",
        "contractAppIdObj#0 (copy)",
        "\"asset_1_id\""
      ]
    },
    "1119": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "oracle#0",
        "token_1_exists#0",
        "token_1_id#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "token_1_exists#0"
      ]
    },
    "1120": {
      "op": "pop",
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0"
      ]
    },
    "1121": {
      "op": "cover 2",
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "1123": {
      "op": "bytec 18 // \"cumulative_price_update_timestamp\"",
      "defined_out": [
        "\"cumulative_price_update_timestamp\"",
        "address#0",
        "contractAppIdObj#0",
        "oracle#0",
        "token_1_id#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "address#0",
        "contractAppIdObj#0",
        "\"cumulative_price_update_timestamp\""
      ]
    },
    "1125": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "new_cumulative_timestamp#0",
        "new_cumulative_timestamp_exists#0",
        "oracle#0",
        "token_1_id#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "new_cumulative_timestamp#0",
        "new_cumulative_timestamp_exists#0"
      ]
    },
    "1126": {
      "op": "pop",
      "stack_out": [
        "oracle#0",
        "address#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "new_cumulative_timestamp#0"
      ]
    },
    "1127": {
      "op": "cover 2",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "token_1_id#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0",
        "token_1_id#0"
      ]
    },
    "1129": {
      "op": "frame_dig -2",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "tokenId#0 (copy)",
        "token_1_id#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0",
        "token_1_id#0",
        "tokenId#0 (copy)"
      ]
    },
    "1131": {
      "op": "==",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0",
        "tmp%1#0"
      ]
    },
    "1132": {
      "op": "bz getOraclePrice_else_body@2",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0"
      ]
    },
    "1135": {
      "op": "frame_dig 1",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0",
        "address#0"
      ]
    },
    "1137": {
      "op": "swap",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "1138": {
      "op": "bytec 16 // \"asset_1_cumulative_price\"",
      "defined_out": [
        "\"asset_1_cumulative_price\"",
        "address#0",
        "contractAppIdObj#0",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "address#0",
        "contractAppIdObj#0",
        "\"asset_1_cumulative_price\""
      ]
    },
    "1140": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "price#0",
        "priceExists#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "price#0",
        "priceExists#0"
      ]
    },
    "1141": {
      "op": "pop",
      "defined_out": [
        "address#0",
        "newCummulativePrice#3",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3"
      ]
    },
    "1142": {
      "block": "getOraclePrice_after_if_else@3",
      "stack_in": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0"
      ]
    },
    "1144": {
      "op": "dup",
      "defined_out": [
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "oracle#0 (copy)"
      ]
    },
    "1145": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "oracle#0",
        "oracle#0 (copy)"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "oracle#0 (copy)",
        "56"
      ]
    },
    "1147": {
      "op": "extract_uint64",
      "defined_out": [
        "oracle#0",
        "previousTimestamp#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "previousTimestamp#0"
      ]
    },
    "1148": {
      "op": "frame_dig 2",
      "defined_out": [
        "new_cumulative_timestamp#0",
        "oracle#0",
        "previousTimestamp#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "previousTimestamp#0",
        "new_cumulative_timestamp#0"
      ]
    },
    "1150": {
      "op": "swap",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "new_cumulative_timestamp#0",
        "previousTimestamp#0"
      ]
    },
    "1151": {
      "op": "-",
      "defined_out": [
        "deltaTime#0",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "oracle#0",
        "deltaTime#0"
      ]
    },
    "1152": {
      "op": "swap",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "deltaTime#0",
        "oracle#0"
      ]
    },
    "1153": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "deltaTime#0",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "deltaTime#0",
        "oracle#0",
        "40"
      ]
    },
    "1155": {
      "op": "extract_uint64",
      "defined_out": [
        "deltaTime#0",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3",
        "deltaTime#0",
        "tmp%4#0"
      ]
    },
    "1156": {
      "op": "uncover 2",
      "defined_out": [
        "deltaTime#0",
        "newCummulativePrice#3",
        "new_cumulative_timestamp#0",
        "oracle#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "deltaTime#0",
        "tmp%4#0",
        "newCummulativePrice#3"
      ]
    },
    "1158": {
      "op": "swap",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "deltaTime#0",
        "newCummulativePrice#3",
        "tmp%4#0"
      ]
    },
    "1159": {
      "op": "-",
      "defined_out": [
        "deltaPrice#0",
        "deltaTime#0",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "deltaTime#0",
        "deltaPrice#0"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "deltaPrice#0",
        "deltaTime#0"
      ]
    },
    "1161": {
      "op": "/",
      "defined_out": [
        "instantaneous_price#0",
        "new_cumulative_timestamp#0",
        "oracle#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "instantaneous_price#0"
      ]
    },
    "1162": {
      "op": "frame_bury 0"
    },
    "1164": {
      "retsub": true,
      "op": "retsub"
    },
    "1165": {
      "block": "getOraclePrice_else_body@2",
      "stack_in": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "contractAppIdObj#0",
        "address#0"
      ]
    },
    "1167": {
      "op": "swap",
      "defined_out": [
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "address#0",
        "contractAppIdObj#0"
      ]
    },
    "1168": {
      "op": "bytec 17 // \"asset_2_cumulative_price\"",
      "defined_out": [
        "\"asset_2_cumulative_price\"",
        "address#0",
        "contractAppIdObj#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "address#0",
        "contractAppIdObj#0",
        "\"asset_2_cumulative_price\""
      ]
    },
    "1170": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "priceExists\u2081#0",
        "price\u2081#0"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "price\u2081#0",
        "priceExists\u2081#0"
      ]
    },
    "1171": {
      "op": "pop",
      "defined_out": [
        "address#0",
        "newCummulativePrice#3"
      ],
      "stack_out": [
        "oracle#0",
        "address#0",
        "new_cumulative_timestamp#0",
        "newCummulativePrice#3"
      ]
    },
    "1172": {
      "op": "b getOraclePrice_after_if_else@3"
    },
    "1175": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getPricesFromOracles",
      "params": {
        "tokenId#0": "uint64"
      },
      "block": "getPricesFromOracles",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1178": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1179": {
      "op": "bytec_3 // \"oracle_pools_count\"",
      "defined_out": [
        "\"oracle_pools_count\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"oracle_pools_count\""
      ]
    },
    "1180": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "maybe_exists%0#0"
      ]
    },
    "1181": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oracleIndex#0"
      ]
    },
    "1182": {
      "op": "intc_0 // 0"
    },
    "1183": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "1184": {
      "block": "getPricesFromOracles_while_top@1",
      "stack_in": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "1186": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "oracleIndex#0"
      ]
    },
    "1188": {
      "op": "<",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1189": {
      "op": "bz getPricesFromOracles_after_while@3",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "1192": {
      "op": "frame_dig 2",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1195": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1196": {
      "op": "bytec 7 // \"oracle_pools\"",
      "defined_out": [
        "\"oracle_pools\"",
        "i#0",
        "oracleIndex#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"oracle_pools\""
      ]
    },
    "1198": {
      "op": "swap",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "\"oracle_pools\"",
        "val_as_bytes%0#0"
      ]
    },
    "1199": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1200": {
      "op": "box_get",
      "defined_out": [
        "i#0",
        "maybe_exists%1#0",
        "oracle#0",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "oracle#0",
        "maybe_exists%1#0"
      ]
    },
    "1201": {
      "op": "bury 1",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "1203": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "1204": {
      "op": "frame_dig -1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tokenId#0 (copy)"
      ]
    },
    "1206": {
      "op": "dig 1",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "tokenId#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "1208": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getOraclePrice",
      "op": "callsub getOraclePrice",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "price#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "price#0"
      ]
    },
    "1211": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "price#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "price#0",
        "totalPrice#0"
      ]
    },
    "1213": {
      "op": "+",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "totalPrice#0"
      ]
    },
    "1214": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "1216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "oracleIndex#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1217": {
      "op": "+",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "i#0"
      ]
    },
    "1218": {
      "op": "frame_bury 2",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ]
    },
    "1220": {
      "op": "b getPricesFromOracles_while_top@1"
    },
    "1223": {
      "block": "getPricesFromOracles_after_while@3",
      "stack_in": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "oracleIndex#0"
      ]
    },
    "1225": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "oracleIndex#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "oracleIndex#0",
        "1"
      ]
    },
    "1226": {
      "op": "+",
      "defined_out": [
        "oracleIndex#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "1227": {
      "op": "frame_dig 1",
      "defined_out": [
        "oracleIndex#0",
        "tmp%2#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%2#0",
        "totalPrice#0"
      ]
    },
    "1229": {
      "op": "swap",
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "totalPrice#0",
        "tmp%2#0"
      ]
    },
    "1230": {
      "op": "/",
      "defined_out": [
        "oracleIndex#0",
        "tmp%3#0",
        "totalPrice#0"
      ],
      "stack_out": [
        "oracleIndex#0",
        "totalPrice#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1231": {
      "op": "frame_bury 0"
    },
    "1233": {
      "retsub": true,
      "op": "retsub"
    },
    "1234": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.addNewCollateralType",
      "params": {
        "collateralTokenId#0": "bytes",
        "baseTokenId#0": "bytes"
      },
      "block": "addNewCollateralType",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1238": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1241": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1242": {
      "op": "txn Sender",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "1244": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1245": {
      "op": "bytec 4 // \"admin_account\"",
      "defined_out": [
        "\"admin_account\"",
        "0",
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "0",
        "\"admin_account\""
      ]
    },
    "1247": {
      "op": "app_global_get_ex",
      "defined_out": [
        "baseToken#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1248": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1249": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%1#0"
      ]
    },
    "1250": {
      "op": "assert",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1251": {
      "op": "frame_dig -2",
      "defined_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "baseToken#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1253": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1254": {
      "op": "dup",
      "stack_out": [
        "baseToken#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1255": {
      "op": "cover 2",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1257": {
      "op": "dig 1",
      "defined_out": [
        "baseToken#0",
        "baseToken#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseToken#0",
        "tmp%2#0",
        "baseToken#0 (copy)"
      ]
    },
    "1259": {
      "op": "!=",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "1260": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "baseToken#0"
      ]
    },
    "1261": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseToken#0",
        "baseTokenId#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseToken#0",
        "baseTokenId#0 (copy)"
      ]
    },
    "1263": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "1264": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "1265": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1266": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1267": {
      "block": "addNewCollateralType_while_top@3",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1268": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1269": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1270": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1"
      ]
    },
    "1271": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%0#1",
        "i#0"
      ]
    },
    "1273": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%0#1"
      ]
    },
    "1274": {
      "op": "bz addNewCollateralType_after_while@7",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1277": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1279": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1280": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1282": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1283": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "1284": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1285": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0"
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateral#0",
        "0"
      ]
    },
    "1287": {
      "op": "extract_uint64",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%3#1"
      ]
    },
    "1288": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%3#1",
        "tmp%2#0"
      ]
    },
    "1290": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1291": {
      "op": "bz addNewCollateralType_after_if_else@6",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1294": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1295": {
      "block": "addNewCollateralType_after_inlined_smart_contracts/we_lend/weLendContract.algo.ts::WeLend.collateralExists@8",
      "stack_in": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ],
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "1296": {
      "op": "assert",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1297": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1299": {
      "op": "frame_dig -1",
      "defined_out": [
        "baseTokenId#0 (copy)",
        "collateralTokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "collateralTokenId#0 (copy)",
        "baseTokenId#0 (copy)"
      ]
    },
    "1301": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0"
      ]
    },
    "1302": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "0"
      ]
    },
    "1303": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1305": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%2#0"
      ]
    },
    "1306": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "newAcceptedCollateral#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1307": {
      "op": "+",
      "defined_out": [
        "newAcceptedCollateral#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "to_encode%0#0"
      ]
    },
    "1308": {
      "op": "itob",
      "defined_out": [
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ]
    },
    "1309": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1311": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1312": {
      "op": "concat",
      "defined_out": [
        "newAcceptedCollateral#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "newAcceptedCollateral#0",
        "tmp%8#0"
      ]
    },
    "1313": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%8#0",
        "newAcceptedCollateral#0"
      ]
    },
    "1314": {
      "op": "box_put",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1315": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1316": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1318": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%3#0"
      ]
    },
    "1319": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1320": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "new_state_value%0#0"
      ]
    },
    "1321": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "new_state_value%0#0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1322": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "\"accepted_collaterals_count\"",
        "new_state_value%0#0"
      ]
    },
    "1323": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1324": {
      "op": "itxn_begin"
    },
    "1325": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1327": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1328": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1329": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1331": {
      "op": "frame_dig 0",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%2#0"
      ]
    },
    "1333": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1335": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1337": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1339": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "4"
      ]
    },
    "1340": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1342": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "0"
      ]
    },
    "1343": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1345": {
      "op": "itxn_submit"
    },
    "1346": {
      "retsub": true,
      "op": "retsub"
    },
    "1347": {
      "block": "addNewCollateralType_after_if_else@6",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1349": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1350": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "i#0"
      ]
    },
    "1351": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0"
      ]
    },
    "1353": {
      "op": "b addNewCollateralType_while_top@3"
    },
    "1356": {
      "block": "addNewCollateralType_after_while@7",
      "stack_in": [
        "tmp%2#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "1357": {
      "op": "b addNewCollateralType_after_inlined_smart_contracts/we_lend/weLendContract.algo.ts::WeLend.collateralExists@8"
    },
    "1360": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.depositASA",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "depositASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1363": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1364": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1366": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1367": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1368": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1370": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "1372": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1374": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1375": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1378": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1380": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "1382": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "1384": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "1385": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1388": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1390": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "1392": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "1394": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "1395": {
      "op": "bz depositASA_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1398": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "1399": {
      "block": "depositASA_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1400": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0"
      ]
    },
    "1402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1403": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1404": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1405": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "1406": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1407": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "depositBalance.0#0",
        "depositBalance.1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "depositBalance.0#0",
        "depositBalance.1#0"
      ]
    },
    "1409": {
      "op": "pop",
      "stack_out": [
        "baseToken#0",
        "depositBalance.0#0"
      ]
    },
    "1410": {
      "op": "bnz depositASA_else_body@7",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1413": {
      "op": "frame_dig -1",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1415": {
      "block": "depositASA_after_if_else@8",
      "stack_in": [
        "baseToken#0",
        "lstDue#2"
      ],
      "op": "itxn_begin"
    },
    "1416": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1418": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1419": {
      "op": "bytec 15 // \"lst_token_id\"",
      "defined_out": [
        "\"lst_token_id\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"lst_token_id\""
      ]
    },
    "1421": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1422": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1423": {
      "op": "btoi",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1424": {
      "op": "uncover 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "lstDue#2"
      ]
    },
    "1426": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1428": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1430": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1432": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "baseToken#0",
        "4"
      ]
    },
    "1433": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1436": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1438": {
      "op": "itxn_submit"
    },
    "1439": {
      "retsub": true,
      "op": "retsub"
    },
    "1440": {
      "block": "depositASA_else_body@7",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1441": {
      "op": "bytec 5 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "1443": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1444": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1"
      ]
    },
    "1445": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "10000"
      ]
    },
    "1446": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "1447": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "1448": {
      "op": "bytec 6 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1450": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1451": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "1452": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0"
      ]
    },
    "1453": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "1455": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "1456": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "1457": {
      "op": "divw",
      "defined_out": [
        "lstDue#2"
      ],
      "stack_out": [
        "baseToken#0",
        "lstDue#2"
      ]
    },
    "1458": {
      "op": "b depositASA_after_if_else@8"
    },
    "1461": {
      "block": "depositASA_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "1462": {
      "op": "b depositASA_bool_merge@5"
    },
    "1465": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.withdrawDeposit",
      "params": {
        "assetTransferTxn#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "withdrawDeposit",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1468": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1469": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"base_token_id\""
      ]
    },
    "1470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1471": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1472": {
      "op": "btoi",
      "defined_out": [
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1473": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetTransferTxn#0 (copy)",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1475": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0"
      ]
    },
    "1477": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1479": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%2#0"
      ]
    },
    "1480": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1483": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1485": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "baseToken#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%3#0"
      ]
    },
    "1487": {
      "op": "frame_dig 0",
      "stack_out": [
        "baseToken#0",
        "tmp%3#0",
        "baseToken#0"
      ]
    },
    "1489": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%4#0"
      ]
    },
    "1490": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1493": {
      "op": "frame_dig -2",
      "stack_out": [
        "baseToken#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1495": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0"
      ]
    },
    "1497": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "baseToken#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%5#0",
        "amount#0 (copy)"
      ]
    },
    "1499": {
      "op": "==",
      "defined_out": [
        "baseToken#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "baseToken#0",
        "tmp%6#0"
      ]
    },
    "1500": {
      "op": "bz withdrawDeposit_bool_false@4",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1503": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "baseToken#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "1504": {
      "block": "withdrawDeposit_bool_merge@5",
      "stack_in": [
        "baseToken#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1505": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1506": {
      "op": "bytec 6 // \"total_deposits\"",
      "defined_out": [
        "\"total_deposits\"",
        "0"
      ],
      "stack_out": [
        "baseToken#0",
        "0",
        "\"total_deposits\""
      ]
    },
    "1508": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1509": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1"
      ]
    },
    "1510": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "baseToken#0",
        "maybe_value%0#1",
        "10000"
      ]
    },
    "1511": {
      "op": "mulw",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0"
      ]
    },
    "1512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0"
      ]
    },
    "1513": {
      "op": "bytec 5 // \"circulating_lst\"",
      "defined_out": [
        "\"circulating_lst\"",
        "0",
        "highBits1#0",
        "lowBits1#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "0",
        "\"circulating_lst\""
      ]
    },
    "1515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "highBits1#0",
        "lowBits1#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1516": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "highBits1#0",
        "lowBits1#0",
        "maybe_value%1#1"
      ]
    },
    "1517": {
      "op": "divw",
      "defined_out": [
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0"
      ]
    },
    "1518": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "lstRatio#0"
      ],
      "stack_out": [
        "baseToken#0",
        "lstRatio#0",
        "amount#0 (copy)"
      ]
    },
    "1520": {
      "op": "mulw",
      "defined_out": [
        "highBits2#0",
        "lowBits2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0"
      ]
    },
    "1521": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "baseToken#0",
        "highBits2#0",
        "lowBits2#0",
        "10000"
      ]
    },
    "1522": {
      "op": "divw",
      "defined_out": [
        "asaDue#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0"
      ]
    },
    "1523": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asaDue#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0"
      ]
    },
    "1525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0",
        "0"
      ]
    },
    "1526": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "asaDue#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1528": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0",
        "maybe_value%1#0"
      ]
    },
    "1529": {
      "op": "btoi",
      "defined_out": [
        "asaDue#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1530": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "asaDue#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1532": {
      "op": "pop",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%9#0"
      ]
    },
    "1533": {
      "op": "dig 1",
      "defined_out": [
        "asaDue#0",
        "asaDue#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%9#0",
        "asaDue#0 (copy)"
      ]
    },
    "1535": {
      "op": ">=",
      "defined_out": [
        "asaDue#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "tmp%11#0"
      ]
    },
    "1536": {
      "op": "assert",
      "stack_out": [
        "baseToken#0",
        "asaDue#0"
      ]
    },
    "1537": {
      "op": "itxn_begin"
    },
    "1538": {
      "op": "txn Sender",
      "defined_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1541": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1543": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%2#0"
      ]
    },
    "1544": {
      "op": "btoi",
      "defined_out": [
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "asaDue#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1545": {
      "op": "uncover 2",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "asaDue#0"
      ]
    },
    "1547": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "1549": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "baseToken#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1551": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1553": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "baseToken#0",
        "4"
      ]
    },
    "1554": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "baseToken#0",
        "0"
      ]
    },
    "1557": {
      "op": "itxn_field Fee",
      "stack_out": [
        "baseToken#0"
      ]
    },
    "1559": {
      "op": "itxn_submit"
    },
    "1560": {
      "retsub": true,
      "op": "retsub"
    },
    "1561": {
      "block": "withdrawDeposit_bool_false@4",
      "stack_in": [
        "baseToken#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "baseToken#0",
        "and_result%0#0"
      ]
    },
    "1562": {
      "op": "b withdrawDeposit_bool_merge@5"
    },
    "1565": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.borrow",
      "params": {
        "assetTransferTxn#0": "uint64",
        "requestedLoanAmount#0": "uint64",
        "lstApp#0": "uint64",
        "collateralTokenId#0": "bytes"
      },
      "block": "borrow",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1568": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0"
      ]
    },
    "1569": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetTransferTxn#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1571": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%0#0"
      ]
    },
    "1573": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "collateral#0",
        "tmp%2#0"
      ]
    },
    "1576": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": [
        "collateral#0"
      ]
    },
    "1577": {
      "op": "frame_dig -4",
      "stack_out": [
        "collateral#0",
        "assetTransferTxn#0 (copy)"
      ]
    },
    "1579": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "collateralDeposit#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0"
      ]
    },
    "1581": {
      "op": "intc_0 // 0",
      "defined_out": [
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1582": {
      "block": "borrow_while_top@8",
      "stack_in": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1583": {
      "op": "bytec_2 // \"accepted_collaterals_count\"",
      "defined_out": [
        "\"accepted_collaterals_count\"",
        "0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0",
        "\"accepted_collaterals_count\""
      ]
    },
    "1584": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1585": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "1586": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "1588": {
      "op": "dup"
    },
    "1589": {
      "op": "uncover 2",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "maybe_value%0#0"
      ]
    },
    "1591": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "tmp%0#2"
      ]
    },
    "1592": {
      "error": "Collateral not found",
      "op": "assert // Collateral not found",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1593": {
      "op": "itob",
      "defined_out": [
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "val_as_bytes%0#0"
      ]
    },
    "1594": {
      "op": "bytec 8 // \"accepted_collaterals\"",
      "defined_out": [
        "\"accepted_collaterals\"",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "val_as_bytes%0#0",
        "\"accepted_collaterals\""
      ]
    },
    "1596": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "\"accepted_collaterals\"",
        "val_as_bytes%0#0"
      ]
    },
    "1597": {
      "op": "concat",
      "defined_out": [
        "i#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "1598": {
      "op": "box_get",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1599": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "collateral#0"
      ]
    },
    "1600": {
      "op": "dup",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "collateral#0",
        "collateral#0 (copy)"
      ]
    },
    "1601": {
      "op": "cover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0",
        "collateral#0"
      ]
    },
    "1603": {
      "op": "frame_bury 0",
      "defined_out": [
        "collateral#0",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "maybe_exists%1#0"
      ]
    },
    "1605": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0"
      ]
    },
    "1606": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateral#0",
        "0"
      ]
    },
    "1607": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#2"
      ]
    },
    "1608": {
      "op": "frame_dig -1",
      "defined_out": [
        "collateral#0",
        "collateralTokenId#0 (copy)",
        "i#0",
        "tmp%3#2"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#2",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1610": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#2",
        "tmp%4#2"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#2",
        "tmp%4#2"
      ]
    },
    "1611": {
      "op": "==",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1612": {
      "op": "bz borrow_after_if_else@10",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1615": {
      "op": "itxn_begin"
    },
    "1616": {
      "op": "bytec 11 // method \"getCirculatingLST()uint64\"",
      "defined_out": [
        "Method(getCirculatingLST()uint64)",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "Method(getCirculatingLST()uint64)"
      ]
    },
    "1618": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1620": {
      "op": "frame_dig -2",
      "defined_out": [
        "collateral#0",
        "i#0",
        "lstApp#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "lstApp#0 (copy)"
      ]
    },
    "1622": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1624": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "appl"
      ]
    },
    "1626": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1629": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1631": {
      "op": "itxn_submit"
    },
    "1632": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0"
      ]
    },
    "1634": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "1635": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%0#0",
        "collateral#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "awst_tmp%0#0",
        "tmp%3#0"
      ]
    },
    "1638": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "awst_tmp%0#0"
      ]
    },
    "1639": {
      "op": "extract 0 4",
      "defined_out": [
        "collateral#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1642": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "collateral#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%4#0",
        "0x151f7c75"
      ]
    },
    "1643": {
      "op": "==",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1644": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1645": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1646": {
      "op": "itxn_begin"
    },
    "1647": {
      "op": "bytec 12 // method \"getTotalDeposits()uint64\"",
      "defined_out": [
        "Method(getTotalDeposits()uint64)",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "Method(getTotalDeposits()uint64)"
      ]
    },
    "1649": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1651": {
      "op": "frame_dig -2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "lstApp#0 (copy)"
      ]
    },
    "1653": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1655": {
      "op": "pushint 6 // appl",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "appl"
      ]
    },
    "1657": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1659": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "0"
      ]
    },
    "1660": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0"
      ]
    },
    "1662": {
      "op": "itxn_submit"
    },
    "1663": {
      "op": "itxn LastLog",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0"
      ]
    },
    "1665": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "awst_tmp%1#0 (copy)"
      ]
    },
    "1666": {
      "op": "extract 4 0",
      "defined_out": [
        "awst_tmp%1#0",
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "awst_tmp%1#0",
        "tmp%7#0"
      ]
    },
    "1669": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "awst_tmp%1#0"
      ]
    },
    "1670": {
      "op": "extract 0 4",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1673": {
      "op": "bytec_1 // 0x151f7c75",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%8#0",
        "0x151f7c75"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1675": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "tmp%7#0"
      ]
    },
    "1676": {
      "op": "btoi",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "i#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0"
      ]
    },
    "1677": {
      "op": "frame_dig 1",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralDeposit#0"
      ]
    },
    "1679": {
      "op": "dup",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "collateralDeposit#0",
        "collateralDeposit#0 (copy)",
        "i#0",
        "totalDepositsExternal#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralDeposit#0 (copy)",
        "collateralDeposit#0 (copy)"
      ]
    },
    "1680": {
      "op": "cover 3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "circulatingExternalLST#0",
        "totalDepositsExternal#0",
        "collateralDeposit#0 (copy)"
      ]
    },
    "1682": {
      "op": "mulw",
      "defined_out": [
        "circulatingExternalLST#0",
        "collateral#0",
        "collateralDeposit#0",
        "hiCollateral#0",
        "i#0",
        "loCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "circulatingExternalLST#0",
        "hiCollateral#0",
        "loCollateral#0"
      ]
    },
    "1683": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "hiCollateral#0",
        "loCollateral#0",
        "circulatingExternalLST#0"
      ]
    },
    "1685": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "underlyingCollateral#0"
      ]
    },
    "1686": {
      "op": "frame_dig 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "underlyingCollateral#0",
        "collateral#0"
      ]
    },
    "1688": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "underlyingCollateral#0",
        "collateral#0",
        "8"
      ]
    },
    "1690": {
      "op": "extract_uint64",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%12#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "underlyingCollateral#0",
        "tmp%12#0"
      ]
    },
    "1691": {
      "callsub": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getPricesFromOracles",
      "op": "callsub getPricesFromOracles",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "oraclePrice#0",
        "underlyingCollateral#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "underlyingCollateral#0",
        "oraclePrice#0"
      ]
    },
    "1694": {
      "op": "mulw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "i#0",
        "loUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "loUSD#0"
      ]
    },
    "1695": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "collateral#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "i#0",
        "loUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "hiUSD#0",
        "loUSD#0",
        "1"
      ]
    },
    "1696": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "collateralUSD#0"
      ]
    },
    "1697": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "0"
      ]
    },
    "1698": {
      "op": "bytec 13 // \"ltv_bps\"",
      "defined_out": [
        "\"ltv_bps\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "0",
        "\"ltv_bps\""
      ]
    },
    "1700": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1701": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "collateralUSD#0",
        "maybe_value%0#0"
      ]
    },
    "1702": {
      "op": "*",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "tmp%13#0"
      ]
    },
    "1703": {
      "op": "intc_3 // 10000",
      "defined_out": [
        "10000",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "tmp%13#0",
        "10000"
      ]
    },
    "1704": {
      "op": "/",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "maxBorrowUSD#0"
      ]
    },
    "1705": {
      "op": "frame_dig -3",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "maxBorrowUSD#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1707": {
      "op": ">=",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "tmp%14#0"
      ]
    },
    "1708": {
      "op": "assert",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0"
      ]
    },
    "1709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "0"
      ]
    },
    "1710": {
      "op": "bytec 14 // \"origination_fee_bps\"",
      "defined_out": [
        "\"origination_fee_bps\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "0",
        "\"origination_fee_bps\""
      ]
    },
    "1712": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1713": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "maybe_value%1#0"
      ]
    },
    "1714": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "maybe_value%1#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1716": {
      "op": "*",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "tmp%15#0"
      ]
    },
    "1717": {
      "op": "intc_3 // 10000",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "tmp%15#0",
        "10000"
      ]
    },
    "1718": {
      "op": "/",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "fee#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "fee#0"
      ]
    },
    "1719": {
      "op": "frame_dig -3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "fee#0",
        "requestedLoanAmount#0 (copy)"
      ]
    },
    "1721": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "requestedLoanAmount#0 (copy)",
        "fee#0"
      ]
    },
    "1722": {
      "op": "-",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0"
      ]
    },
    "1723": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "0"
      ]
    },
    "1724": {
      "op": "bytec_0 // \"base_token_id\"",
      "defined_out": [
        "\"base_token_id\"",
        "0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1725": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1726": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "maybe_value%2#0"
      ]
    },
    "1727": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "tmp%16#0"
      ]
    },
    "1728": {
      "op": "asset_params_get AssetDecimals",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "decimals#0",
        "decimalsExists#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "decimals#0",
        "decimalsExists#0"
      ]
    },
    "1730": {
      "op": "pop",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "decimals#0"
      ]
    },
    "1731": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "collateral#0",
        "collateralDeposit#0",
        "decimals#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "decimals#0",
        "10"
      ]
    },
    "1733": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "10",
        "decimals#0"
      ]
    },
    "1734": {
      "op": "exp",
      "defined_out": [
        "assetScale#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "assetScale#0"
      ]
    },
    "1735": {
      "op": "dig 1",
      "defined_out": [
        "assetScale#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "disbursement#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "assetScale#0",
        "disbursement#0 (copy)"
      ]
    },
    "1737": {
      "op": "mulw",
      "defined_out": [
        "assetHi#0",
        "assetLo#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "assetHi#0",
        "assetLo#0"
      ]
    },
    "1738": {
      "op": "intc 4 // 4294967296",
      "defined_out": [
        "4294967296",
        "assetHi#0",
        "assetLo#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "assetHi#0",
        "assetLo#0",
        "4294967296"
      ]
    },
    "1740": {
      "op": "divw",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "interim#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "interim#0"
      ]
    },
    "1741": {
      "op": "intc 4 // 4294967296",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "interim#0",
        "4294967296"
      ]
    },
    "1743": {
      "op": "/",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0"
      ]
    },
    "1744": {
      "op": "txn Sender",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0"
      ]
    },
    "1746": {
      "op": "itxn_begin"
    },
    "1747": {
      "op": "pushbytes \"r\"",
      "defined_out": [
        "\"r\"",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "\"r\""
      ]
    },
    "1750": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "\"r\"",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1752": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1"
      ]
    },
    "1753": {
      "op": "dup",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1754": {
      "op": "pushbytes \"b\"",
      "defined_out": [
        "\"b\"",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%0#1 (copy)",
        "\"b\""
      ]
    },
    "1757": {
      "op": "concat",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%1#1"
      ]
    },
    "1758": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%1#1",
        "0"
      ]
    },
    "1759": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%1#1",
        "0",
        "\"base_token_id\""
      ]
    },
    "1760": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%1#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%1#1",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1761": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "tmp%1#1",
        "maybe_value%0#1"
      ]
    },
    "1762": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1763": {
      "op": "dig 2",
      "defined_out": [
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "1765": {
      "op": "bytec 9 // \":\"",
      "defined_out": [
        "\":\"",
        "borrowerAddress#0",
        "borrowerAddress#0 (copy)",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "borrowerAddress#0 (copy)",
        "\":\""
      ]
    },
    "1767": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%2#1"
      ]
    },
    "1768": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%2#1",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1770": {
      "op": "concat",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%3#0"
      ]
    },
    "1771": {
      "op": "bytec 9 // \":\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%3#0",
        "\":\""
      ]
    },
    "1773": {
      "op": "concat",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%4#0"
      ]
    },
    "1774": {
      "op": "dig 4",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "scaledDownDisbursement#0 (copy)",
        "tmp%0#1",
        "tmp%4#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%4#0",
        "scaledDownDisbursement#0 (copy)"
      ]
    },
    "1776": {
      "op": "itob",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "tmp%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "1777": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%4#0"
      ]
    },
    "1778": {
      "op": "dig 1",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%4#0",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%4#0",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "1780": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%5#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%5#1"
      ]
    },
    "1781": {
      "op": "bytec 9 // \":\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%5#1",
        "\":\""
      ]
    },
    "1783": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%6#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%6#1"
      ]
    },
    "1784": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%6#1",
        "to_encode%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%6#1",
        "to_encode%0#0"
      ]
    },
    "1786": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "tmp%6#1",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "tmp%6#1",
        "val_as_bytes%1#0"
      ]
    },
    "1787": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "1788": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1790": {
      "op": "dup",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1791": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "1792": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1793": {
      "op": "app_global_get_ex",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_exists%1#0",
        "maybe_value%1#1",
        "scaledDownDisbursement#0",
        "tmp%0#1",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1794": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "tmp%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#1"
      ]
    },
    "1795": {
      "op": "uncover 6",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "maybe_value%1#1",
        "tmp%0#1"
      ]
    },
    "1797": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "tmp%0#1",
        "maybe_value%1#1"
      ]
    },
    "1798": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "1799": {
      "op": "dig 6",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "1801": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetUnitName_idx_0#0"
      ]
    },
    "1803": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1805": {
      "op": "itxn_field Sender",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1807": {
      "op": "dig 6",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "disbursement#0 (copy)"
      ]
    },
    "1809": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1811": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "0"
      ]
    },
    "1812": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "1814": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "1816": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "val_as_bytes%0#0"
      ]
    },
    "1818": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "1819": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "1821": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "3"
      ]
    },
    "1823": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "1825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1826": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0"
      ]
    },
    "1828": {
      "op": "itxn_submit"
    },
    "1829": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "asset.CreatedAssetID#0",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "collateralDeposit#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0"
      ]
    },
    "1831": {
      "op": "uncover 5",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "collateralDeposit#0"
      ]
    },
    "1833": {
      "op": "itob",
      "defined_out": [
        "asset.CreatedAssetID#0",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "disbursement#0",
        "i#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "disbursement#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0"
      ]
    },
    "1834": {
      "op": "uncover 5",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "disbursement#0"
      ]
    },
    "1836": {
      "op": "itob",
      "defined_out": [
        "asset.CreatedAssetID#0",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "1837": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0"
      ]
    },
    "1838": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1839": {
      "op": "app_global_get_ex",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1840": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "asset.CreatedAssetID#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0"
      ]
    },
    "1841": {
      "op": "uncover 3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "asset.CreatedAssetID#0"
      ]
    },
    "1843": {
      "op": "itob",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "maybe_value%2#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0"
      ]
    },
    "1844": {
      "op": "dig 5",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "borrowerAddress#0 (copy)"
      ]
    },
    "1846": {
      "op": "frame_dig -1",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "borrowerAddress#0 (copy)",
        "collateralTokenId#0 (copy)"
      ]
    },
    "1848": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "encoded_tuple_buffer%2#0",
        "i#0",
        "maybe_value%2#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1849": {
      "op": "uncover 4",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "1851": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "encoded_tuple_buffer%3#0",
        "i#0",
        "maybe_value%2#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "val_as_bytes%3#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1852": {
      "op": "uncover 3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%3#0"
      ]
    },
    "1854": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "encoded_tuple_buffer%4#0",
        "i#0",
        "maybe_value%2#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%0#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%0#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1855": {
      "op": "uncover 3",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%0#0"
      ]
    },
    "1857": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "encoded_tuple_buffer%5#0",
        "i#0",
        "maybe_value%2#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "maybe_value%2#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1858": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%5#0",
        "maybe_value%2#0"
      ]
    },
    "1860": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "encoded_tuple_buffer%6#0",
        "i#0",
        "scaledDownDisbursement#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1861": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%5#0"
      ]
    },
    "1862": {
      "op": "concat",
      "defined_out": [
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "loanRecord#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "loanRecord#0"
      ]
    },
    "1863": {
      "op": "bytec 10 // \"loan_records\"",
      "defined_out": [
        "\"loan_records\"",
        "borrowerAddress#0",
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "loanRecord#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "borrowerAddress#0",
        "loanRecord#0",
        "\"loan_records\""
      ]
    },
    "1865": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "loanRecord#0",
        "\"loan_records\"",
        "borrowerAddress#0"
      ]
    },
    "1867": {
      "op": "concat",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "loanRecord#0",
        "tmp%8#0"
      ]
    },
    "1868": {
      "op": "swap",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "tmp%8#0",
        "loanRecord#0"
      ]
    },
    "1869": {
      "op": "box_put",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0"
      ]
    },
    "1870": {
      "op": "itxn_begin"
    },
    "1871": {
      "op": "txn Sender",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1873": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1874": {
      "op": "bytec_0 // \"base_token_id\"",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "0",
        "\"base_token_id\""
      ]
    },
    "1875": {
      "op": "app_global_get_ex",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1876": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "maybe_value%3#0"
      ]
    },
    "1877": {
      "op": "btoi",
      "defined_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "scaledDownDisbursement#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "scaledDownDisbursement#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "1878": {
      "op": "uncover 2",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0",
        "scaledDownDisbursement#0"
      ]
    },
    "1880": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%2%%param_XferAsset_idx_0#0"
      ]
    },
    "1882": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "inner_txn_params%2%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1884": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1886": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "4"
      ]
    },
    "1887": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1889": {
      "op": "intc_0 // 0",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "0"
      ]
    },
    "1890": {
      "op": "itxn_field Fee",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1892": {
      "op": "itxn_submit"
    },
    "1893": {
      "retsub": true,
      "op": "retsub"
    },
    "1894": {
      "block": "borrow_after_if_else@10",
      "stack_in": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1896": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1897": {
      "op": "+",
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0",
        "i#0"
      ]
    },
    "1898": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "collateral#0",
        "collateralDeposit#0",
        "i#0"
      ]
    },
    "1900": {
      "op": "b borrow_while_top@8"
    },
    "1903": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getLoanRecord",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecord",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1906": {
      "op": "bytec 10 // \"loan_records\"",
      "defined_out": [
        "\"loan_records\""
      ],
      "stack_out": [
        "\"loan_records\""
      ]
    },
    "1908": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_records\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_records\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "1910": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1911": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1912": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1913": {
      "retsub": true,
      "op": "retsub"
    },
    "1914": {
      "subroutine": "smart_contracts/we_lend/weLendContract.algo.ts::WeLend.getLoanRecordASAId",
      "params": {
        "borrowerAddress#0": "bytes"
      },
      "block": "getLoanRecordASAId",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1917": {
      "op": "bytec 10 // \"loan_records\"",
      "defined_out": [
        "\"loan_records\""
      ],
      "stack_out": [
        "\"loan_records\""
      ]
    },
    "1919": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"loan_records\"",
        "borrowerAddress#0 (copy)"
      ],
      "stack_out": [
        "\"loan_records\"",
        "borrowerAddress#0 (copy)"
      ]
    },
    "1921": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1922": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1923": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1924": {
      "op": "pushint 72 // 72",
      "defined_out": [
        "72",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "72"
      ]
    },
    "1926": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1927": {
      "retsub": true,
      "op": "retsub"
    }
  }
}