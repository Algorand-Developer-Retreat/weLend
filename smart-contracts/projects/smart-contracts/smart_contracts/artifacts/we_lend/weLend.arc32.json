{
    "hints": {
        "createApplication(account,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "initApplication(pay,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getCirculatingLST()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTotalDeposits()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getOraclePoolsCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getAcceptedCollateralsCount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addOraclePool(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getOraclePrice(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPricesFromOracles(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addNewCollateralType(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "depositASA(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawDeposit(axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "borrow(axfer,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimLoanRecordASA(account,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "LoanRecord",
                    "elements": [
                        [
                            "borrowerAddress",
                            "address"
                        ],
                        [
                            "collateralTokenId",
                            "uint64"
                        ],
                        [
                            "collateralAmount",
                            "uint64"
                        ],
                        [
                            "disbursement",
                            "uint64"
                        ],
                        [
                            "scaledDownDisbursement",
                            "uint64"
                        ],
                        [
                            "borrowedTokenId",
                            "uint64"
                        ],
                        [
                            "loanRecordASAId",
                            "uint64"
                        ],
                        [
                            "lastAccrualTimestamp",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getLoanRecordASAId(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "repayLoan(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawFees()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "accrueLoanInterest(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buyout(account,account,axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "accepted_collaterals_count": {
                    "type": "uint64",
                    "key": "accepted_collaterals_count"
                },
                "active_loan_records": {
                    "type": "uint64",
                    "key": "active_loan_records"
                },
                "admin_account": {
                    "type": "bytes",
                    "key": "admin_account"
                },
                "base_token_id": {
                    "type": "bytes",
                    "key": "base_token_id"
                },
                "circulating_lst": {
                    "type": "uint64",
                    "key": "circulating_lst"
                },
                "fee_pool": {
                    "type": "uint64",
                    "key": "fee_pool"
                },
                "interest_bps": {
                    "type": "uint64",
                    "key": "interest_bps"
                },
                "liq_threshold_bps": {
                    "type": "uint64",
                    "key": "liq_threshold_bps"
                },
                "lst_token_id": {
                    "type": "bytes",
                    "key": "lst_token_id"
                },
                "ltv_bps": {
                    "type": "uint64",
                    "key": "ltv_bps"
                },
                "oracle_pools_count": {
                    "type": "uint64",
                    "key": "oracle_pools_count"
                },
                "origination_fee_bps": {
                    "type": "uint64",
                    "key": "origination_fee_bps"
                },
                "protocol_interest_fee_bps": {
                    "type": "uint64",
                    "key": "protocol_interest_fee_bps"
                },
                "total_deposits": {
                    "type": "uint64",
                    "key": "total_deposits"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "weLend",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "account",
                        "name": "admin"
                    },
                    {
                        "type": "uint64",
                        "name": "baseTokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "initApplication",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "ltv_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "liq_threshold_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "interest_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "origination_fee_bps"
                    },
                    {
                        "type": "uint64",
                        "name": "protocol_interest_fee_bps"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getCirculatingLST",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getTotalDeposits",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getOraclePoolsCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getAcceptedCollateralsCount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "addOraclePool",
                "args": [
                    {
                        "type": "address",
                        "name": "poolAddress"
                    },
                    {
                        "type": "uint64",
                        "name": "contractAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getOraclePrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "oracleIndex"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPricesFromOracles",
                "args": [
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "addNewCollateralType",
                "args": [
                    {
                        "type": "uint64",
                        "name": "collateralTokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "baseTokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "depositASA",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdrawDeposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    },
                    {
                        "type": "uint64",
                        "name": "lstAppId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "borrow",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "requestedLoanAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "lstApp"
                    },
                    {
                        "type": "uint64",
                        "name": "collateralTokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimLoanRecordASA",
                "args": [
                    {
                        "type": "account",
                        "name": "debtor"
                    },
                    {
                        "type": "asset",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getLoanRecord",
                "args": [
                    {
                        "type": "account",
                        "name": "borrowerAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getLoanRecordASAId",
                "args": [
                    {
                        "type": "account",
                        "name": "borrowerAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "repayLoan",
                "args": [
                    {
                        "type": "axfer",
                        "name": "assetTransferTxn"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdrawFees",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "accrueLoanInterest",
                "args": [
                    {
                        "type": "account",
                        "name": "debtor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buyout",
                "args": [
                    {
                        "type": "account",
                        "name": "buyer"
                    },
                    {
                        "type": "account",
                        "name": "debtor"
                    },
                    {
                        "type": "axfer",
                        "name": "axferTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}