/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"weLend","structs":{"AcceptedCollateral":[{"name":"assetId","type":"uint64"},{"name":"baseAssetId","type":"uint64"},{"name":"totalCollateral","type":"uint64"}],"LoanRecord":[{"name":"borrowerAddress","type":"address"},{"name":"collateralTokenId","type":"uint64"},{"name":"collateralAmount","type":"uint64"},{"name":"disbursement","type":"uint64"},{"name":"scaledDownDisbursement","type":"uint64"},{"name":"borrowedTokenId","type":"uint64"},{"name":"loanRecordAsaId","type":"uint64"},{"name":"lastAccrualTimestamp","type":"uint64"}],"Oracle":[{"name":"address","type":"address"},{"name":"contractAppId","type":"uint64"},{"name":"asset1LastCumulativePrice","type":"uint64"},{"name":"asset2LastCumulativePrice","type":"uint64"},{"name":"cumulativePriceLastTimestamp","type":"uint64"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"admin"},{"type":"uint64","name":"baseTokenId"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initApplication","args":[{"type":"pay","name":"mbrTxn"},{"type":"uint64","name":"ltv_bps"},{"type":"uint64","name":"liq_threshold_bps"},{"type":"uint64","name":"interest_bps"},{"type":"uint64","name":"origination_fee_bps"},{"type":"uint64","name":"protocol_interest_fee_bps"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCirculatingLST","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTotalDeposits","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getOraclePoolsCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getAcceptedCollateralsCount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addOraclePool","args":[{"type":"address","name":"poolAddress"},{"type":"uint64","name":"contractAppId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getOraclePrice","args":[{"type":"uint64","name":"tokenId"},{"type":"uint64","name":"oracleIndex"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPricesFromOracles","args":[{"type":"uint64","name":"tokenId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addNewCollateralType","args":[{"type":"uint64","name":"collateralTokenId"},{"type":"uint64","name":"baseTokenId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"depositASA","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawDeposit","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"lstAppId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"borrow","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"requestedLoanAmount"},{"type":"uint64","name":"lstApp"},{"type":"uint64","name":"collateralTokenId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimLoanRecordASA","args":[{"type":"account","name":"debtor"},{"type":"asset","name":"assetId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLoanRecord","args":[{"type":"account","name":"borrowerAddress"}],"returns":{"type":"(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"LoanRecord"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLoanRecordASAId","args":[{"type":"account","name":"borrowerAddress"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"repayLoan","args":[{"type":"axfer","name":"assetTransferTxn"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawFees","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"accrueLoanInterest","args":[{"type":"account","name":"debtor"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buyout","args":[{"type":"account","name":"buyer"},{"type":"account","name":"debtor"},{"type":"axfer","name":"axferTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":11,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"base_token_id":{"keyType":"AVMString","valueType":"uint64","key":"YmFzZV90b2tlbl9pZA=="},"lst_token_id":{"keyType":"AVMString","valueType":"uint64","key":"bHN0X3Rva2VuX2lk"},"circulating_lst":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y2lyY3VsYXRpbmdfbHN0"},"total_deposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfZGVwb3NpdHM="},"admin_account":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW5fYWNjb3VudA=="},"ltv_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bHR2X2Jwcw=="},"liq_threshold_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxX3RocmVzaG9sZF9icHM="},"interest_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50ZXJlc3RfYnBz"},"origination_fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JpZ2luYXRpb25fZmVlX2Jwcw=="},"protocol_interest_fee_bps":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvdG9jb2xfaW50ZXJlc3RfZmVlX2Jwcw=="},"active_loan_records":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWN0aXZlX2xvYW5fcmVjb3Jkcw=="},"oracle_pools_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3JhY2xlX3Bvb2xzX2NvdW50"},"accepted_collaterals_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXB0ZWRfY29sbGF0ZXJhbHNfY291bnQ="},"fee_pool":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVlX3Bvb2w="}},"local":{},"box":{"oracle_pool":{"keyType":"AVMString","valueType":"Oracle","key":"b3JhY2xlX3Bvb2w="},"accepted_collaterals":{"keyType":"AVMString","valueType":"AcceptedCollateral","key":"YWNjZXB0ZWRfY29sbGF0ZXJhbHM="},"loan_record":{"keyType":"AVMString","valueType":"LoanRecord","key":"bG9hbl9yZWNvcmQ="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1330,1442,1496,1550,1603,2703,2912,2922,3154,3282],"errorMessage":"Box must have value"},{"pc":[1951,1982,2118,2149],"errorMessage":"Bytes has valid prefix"},{"pc":[3323],"errorMessage":"Collateral amount exceeds current total"},{"pc":[1537,1587],"errorMessage":"Collateral not found"},{"pc":[1332,1605,1629,2309,2414,2425,2841,2846,2851,2856,2864,2869,3075,3237],"errorMessage":"Index access is out of bounds"},{"pc":[2699],"errorMessage":"Loan record ASA does not exist"},{"pc":[2690,3152,3273],"errorMessage":"Loan record does not exist"},{"pc":[546,580,598,610,636,659,681,705,738,768,794,812,833,858,876,893,910,927,944,986],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1059,1797,1921,2070,2968,3395],"errorMessage":"assert target is match for conditions"},{"pc":[1142,1147,1154],"errorMessage":"asset exists"},{"pc":[990],"errorMessage":"can only call when creating"},{"pc":[549,583,601,613,639,662,684,708,741,771,797,815,836,861,879,896,913,930,947],"errorMessage":"can only call when not creating"},{"pc":[1030,1041,1114,1133,1163,1208,1213,1219,1225,1236,1293,1307,1420,1481,1530,1580,1661,1669,1714,1728,1764,1803,1820,1841,1850,1862,1868,1888,1995,2010,2031,2042,2171,2180,2200,2209,2326,2331,2466,2485,2543,2576,2632,2671,2788,2807,2821,2832,2935,3036,3103,3111,3115,3121,3341,3352,3368,3462],"errorMessage":"check GlobalState exists"},{"pc":[2506],"errorMessage":"exceeds LTV limit"},{"pc":[2257],"errorMessage":"exceeds LTV limit with existing debt"},{"pc":[3345],"errorMessage":"loan is not eligible for buyout"},{"pc":[571,623,718,751,781],"errorMessage":"transaction type is axfer"},{"pc":[957],"errorMessage":"transaction type is pay"},{"pc":[2076],"errorMessage":"unsupported collateral"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyAFAAEEkE6AgICAECYYDWJhc2VfdG9rZW5faWQEFR98dQtsb2FuX3JlY29yZA50b3RhbF9kZXBvc2l0cxNhY3RpdmVfbG9hbl9yZWNvcmRzGmFjY2VwdGVkX2NvbGxhdGVyYWxzX2NvdW50DWFkbWluX2FjY291bnQIZmVlX3Bvb2wPY2lyY3VsYXRpbmdfbHN0Em9yYWNsZV9wb29sc19jb3VudAE6FGFjY2VwdGVkX2NvbGxhdGVyYWxzBAnvUl8EroWfOxFsaXFfdGhyZXNob2xkX2JwcwtvcmFjbGVfcG9vbAdsdHZfYnBzDGludGVyZXN0X2JwcxNvcmlnaW5hdGlvbl9mZWVfYnBzGXByb3RvY29sX2ludGVyZXN0X2ZlZV9icHMMbHN0X3Rva2VuX2lkGGFzc2V0XzFfY3VtdWxhdGl2ZV9wcmljZRhhc3NldF8yX2N1bXVsYXRpdmVfcHJpY2UhY3VtdWxhdGl2ZV9wcmljZV91cGRhdGVfdGltZXN0YW1wMRtBAI+CAgQ7AWZeBElLw/cnDCcNghAEiSXFDwRsYzfABDEnQ1kEi73iqgTUv7IzBLAU9ocEOsv7bwRQxXmFBNUByV0EYXfKKAT2dgdPBKuvmAUENq8xYASW2kFuBOnDPB4EVUrfEzYaAI4UAboBkAF/AW4BXQFMAToBIQEMAPoA4ADCAKEAiQBzAFwAQgA2ACQAAiJDMRkURDEYRDYaARfAHDYaAhfAHDEWIwlJOBAkEkSICnwjQzEZFEQxGEQ2GgEXwByICfMjQzEZFEQxGESICbwjQzEZFEQxGEQxFiMJSTgQJBJENhoBF4gI+CNDMRkURDEYRDYaARfAHIgI2RYpTFCwI0MxGRREMRhENhoBF8AciAi4KUxQsCNDMRkURDEYRDYaARfAHDYaAhfAMIgHuyNDMRkURDEYRDEWIwlJOBAkEkQ2GgEXNhoCFzYaA4gFKCNDMRkURDEYRDEWIwlJOBAkEkQ2GgEXNhoCF4gEXyNDMRkURDEYRDEWIwlJOBAkEkQ2GgEXiAPJI0MxGRREMRhENhoBNhoCiANQI0MxGRREMRhENhoBF4gCThYpTFCwI0MxGRREMRhENhoBFzYaAheIAdMWKUxQsCNDMRkURDEYRDYaATYaAogBZCNDMRkURDEYRIgBUhYpTFCwI0MxGRREMRhEiAE7FilMULAjQzEZFEQxGESIASUWKUxQsCNDMRkURDEYRIgBDhYpTFCwI0MxGRREMRhEMRYjCUk4ECMSRDYaARc2GgIXNhoDFzYaBBc2GgUXiAAoI0MxGRREMRgURDYaARfAHDYaAheIAAIjQ4oCACcGi/5ni/8WKExniYoGADEAIicGZUQSRIv6OAAiJwZlRBJBAJqL+jgIgdCJAhJBAI4jRCcQi/tnJw6L/GcnEYv9ZycSi/5nJwkiZycFImcnByJnJwgiZysiZycEImcnE4v/Z7EyCiIoZUQXIrISshGyFCSyECKyAbMiKGVEF7EyCksBcQBESwJxAUQyCk8EcQNEgAFjTFAiKGVEgAFjTFCyJrIlsikisiSyI7IisgCBA7IQIrIBs7QhFicUTGeJIkL/byInCGVEiSIrZUSJIicJZUSJIicFZUSJigIAMQAiJwZlRBJEi/8Xi/5LAScVY0hMi/5LAScWY0hMi/5MJxdjSE8CFk8CFk8CFov+i/9QTwNQTwJQTFAiJwllRCMIFicPTFBMvyInCWVEIwgnCUxniYoCAYv/FicPTFC+TElPAkRJVwAgSU8CgSBbSU4CSoAKYXNzZXRfMV9pZGNITgInF2NITgKL/hJBAB6LAUwnFWNIiwBJgThbiwJMCUyBKFtPAkwJTAqMAImLAUwnFmNIQv/figEBIicJZUQiSYsCiwAMQQAfiwJJFicPTFC+RQFEi/9LAYj/eYsBCIwBIwiMAkL/2YsAIwiLAUwKjACJigEBIiInBWVEiwANQQAeiwAWJwtMUL5EIluL/xcSQQADI0yJiwAjCIwAQv/XIkyJigEBIkkiJwVlRIsBSU8CDEQWJwtMUL5MSU4CjABEIluL/xcSQQABiYsBIwiMAUL/1IoCACJHAyInBWVEiwNJTwIMRBYnC0xQSYwBvkxJTgKMAERJVwAIjAIiW4v+FxJBABuLAEmBEFuL/whMVwgITBaLAk8CUExQiwFMv4mLAyMIjANC/7GKAgAiKGVEFzEAIicGZUQSRIv+F0lLAhNEi/8XTwITRIv+iP8lFESL/ov/UIAIAAAAAAAAAABQIicFZUQjCBYnC0xQTL8iJwVlRCMIJwVMZ7EyCkkishJPArIRshSyACSyECKyAbOJigIAIihlRBeL/jgUMgoSQQBmi/44EYsAEkEAXIv+OBKL/xJBAFIjRDIKIihlRBdwAEhAAC+L/7ExACInFGVEF0sCshKyEbIUJLIQIrIBsyInCGVECCcITGciK2VEi/8IK0xniSInCGVEJR0iK2VEl4v/HSWXQv+/IkL/q4oDACIoZUQXi/04FDIKEkEAlYv9OBGLABJBAIuL/TgSi/4SQQCBI0SxJwyyGov/shiBBrIQIrIBs7Q+SVcEAExXAAQpEkQXsScNshqL/7IYgQayECKyAbO0PklXBABMVwAEKRJEF4v+HU8ClzIKIihlRBdwAEhLAQ9EsTEAIihlRBdLArISshGyFCSyECKyAbMiJwhlRIv+CScITGciK2VETAkrTGeJIkL/fIoEACoxAFC9RQGL/DgUMgoSRIv/iP2lRIv8OBJJTgKL/4j9yLEnDLIai/6yGIEGshAisgGztD5JVwQATFcABCkSRBexJw2yGov+shiBBrIQIrIBs7Q+SVcEAExXAAQpEkQXTwMdTwKXTIEIW4j9ER0jlyInEGVECyUKTCInEmVEi/0LJQqL/UsBCUlOAk4EIicHZUQIJwdMZyIoZUQXcQFIgQpMlB0hBJchBApOAkEBETEAiAKdiAH9SCoxAFBLAb9JgThbSYv9CE8DDkSxSwGBSFsyCrIAsiGBA7IQIrIBs0sBgShbiwBJTgQITIsBSU4CCEsDgTBbTwIIsTIKSwRXIAiAAXJLAVBJgAFiUCIoZURQIihlRE8CTFAyCjEAMgpJMQAnClCL/1AnClBLCRZMSwFQJwpQMgcWULInIrIkTLIsTLIrTLIqTLIpIrIjTwWyIkyyJUyyJk8CsgCBA7IQIrIBs7Q8SwVXACBPBRZPBRZPBldACE8EFjIHFk8FTwdQTwVQTwVQTwRQTwNQTwJQTFAqMQBQTL8iJwRlRCMIJwRMZ4v/TIj8c7ExACIoZUQXiwKyErIRshQkshAisgGziYv9D0QxAIsCiwGL/08DiwCIAANC/9KKBQCxgAFyi/1QSYABYlAiKGVEUIv+JwpQi/1QJwpQi/sWTEsBUCcKUDIHFlAyCkkiKGVETwZMUDIKSSKyJLIssiuL/rIqsiWyAIv8siIisiOyKbInTLImgQOyECKyAbO0PIv/Fov8FiIoZURPAxYyBxaL/ov9UE8FUE8EUE8EUE8DUE8CUExQKov+UEy/IicEZUQjCCcETGeJigIAKov+UEm9RQFEMgqL/3AARQFEvkUBRLEjshKL/7IRi/6yFCSyECKyAbOxMgqL/rIVIrISi/+yEbIUJLIQIrIBs4mKAQIyB0mL/4FQW0lOAg5BAAiL/0lPA08DiYsASYsBCYv/gThbIicRZURLAR0ll08CHYGA54QPlyInE2VEJUwJSwEdJZdKCSIrZURPAggrTGciJwdlRAgnB0xnCIv/VwAgi/9XIAiL/1coCIv/VzAITwQWi/9XQAiL/1dICE8HFk8HTwdQTwZQTwVQTwRQTwNQTwJQTFCL/08DTwOJigEBKov/UL5EiYoBASqL/1C+RIFIW4mKAgCAACIoZUQXi/44FDIKEkEAkov+OBGLARJBAIiL/jgSi/8SQQB+I0QxAIj/uoj/GkhJKjEAUEsBvzEAiP+zTIE4W4v/SwEORIv/CUmMALEyCrIATLIhgQOyECKyAbNAACsqMQBQvEgiJwRlRCMJJwRMZ7ExAExJgSBbTIEoW7ISshGyFCSyECKyAbOJSYEwW0sBVyAIMQBPA4EoW4sATgSI/cmJIkL/fzEAIicGZUQSRLEiJwZlRCIoZUQXIicHZUSyErIRshQkshAisgGzJwciZ4mKAQAqi/9QRwK9RQFEvkSI/mVFAYv/iP8FMgpMcABFAUAAHrEyCosBSYFIW0yBOFuyEov/shOyEbIUJLIQIrIBs7GLAUmBSFsyCrIAsiGBA7IQIrIBs0mBOFtLAYEwW0sCVyAISwOBKFtOA4v/TwSI/SeLAEy/iYoDAIAAKov+UEcCvUUBREm+TElOAk4DRExLAb9JgShbSU8CSYE4W0lOA04DgSBbFklOA4j5AEmBEFtJTgRLAg9EgQhbiPiDHSOXSU8CCiInDmVESwEMRCULIicOZUQKJQklCiMIC4v/OBEiKGVEFxJBAICL/zgUMgoSQQB2i/84EosHEkEAbCNEMgqLAoFIW0mMAHAARQFAABixMgqLBLISi/6yE4sAshGyFCSyECKyAbOxMgqyAIsAsiGBA7IQIrIBs4sBvEgiJwRlRCMJJwRMZ7GLBUkXiwNJTgKyErIRi/2yFCSyECKyAbOLBkwJiPh1iSJC/5E=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AcceptedCollateral = {
  assetId: bigint,
  baseAssetId: bigint,
  totalCollateral: bigint
}


/**
 * Converts the ABI tuple representation of a AcceptedCollateral to the struct representation
 */
export function AcceptedCollateralFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AcceptedCollateral, APP_SPEC.structs) as AcceptedCollateral
}

export type LoanRecord = {
  borrowerAddress: string,
  collateralTokenId: bigint,
  collateralAmount: bigint,
  disbursement: bigint,
  scaledDownDisbursement: bigint,
  borrowedTokenId: bigint,
  loanRecordAsaId: bigint,
  lastAccrualTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a LoanRecord to the struct representation
 */
export function LoanRecordFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.LoanRecord, APP_SPEC.structs) as LoanRecord
}

export type Oracle = {
  address: string,
  contractAppId: bigint,
  asset1LastCumulativePrice: bigint,
  asset2LastCumulativePrice: bigint,
  cumulativePriceLastTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a Oracle to the struct representation
 */
export function OracleFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Oracle, APP_SPEC.structs) as Oracle
}

/**
 * The argument types for the WeLend contract
 */
export type WeLendArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64)void': {
      admin: Uint8Array | string
      baseTokenId: bigint | number
    }
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64)void': {
      mbrTxn: AppMethodCallTransactionArgument
      ltvBps: bigint | number
      liqThresholdBps: bigint | number
      interestBps: bigint | number
      originationFeeBps: bigint | number
      protocolInterestFeeBps: bigint | number
    }
    'getCirculatingLST()uint64': Record<string, never>
    'getTotalDeposits()uint64': Record<string, never>
    'getOraclePoolsCount()uint64': Record<string, never>
    'getAcceptedCollateralsCount()uint64': Record<string, never>
    'addOraclePool(address,uint64)void': {
      poolAddress: string
      contractAppId: bigint | number
    }
    'getOraclePrice(uint64,uint64)uint64': {
      tokenId: bigint | number
      oracleIndex: bigint | number
    }
    'getPricesFromOracles(uint64)uint64': {
      tokenId: bigint | number
    }
    'addNewCollateralType(uint64,uint64)void': {
      collateralTokenId: bigint | number
      baseTokenId: bigint | number
    }
    'depositASA(axfer,uint64)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
    }
    'withdrawDeposit(axfer,uint64,uint64)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
      lstAppId: bigint | number
    }
    'borrow(axfer,uint64,uint64,uint64)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      requestedLoanAmount: bigint | number
      lstApp: bigint | number
      collateralTokenId: bigint | number
    }
    'claimLoanRecordASA(account,asset)void': {
      debtor: Uint8Array | string
      assetId: bigint
    }
    'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      borrowerAddress: Uint8Array | string
    }
    'getLoanRecordASAId(account)uint64': {
      borrowerAddress: Uint8Array | string
    }
    'repayLoan(axfer,uint64)void': {
      assetTransferTxn: AppMethodCallTransactionArgument
      amount: bigint | number
    }
    'withdrawFees()void': Record<string, never>
    'accrueLoanInterest(account)void': {
      debtor: Uint8Array | string
    }
    'buyout(account,account,axfer)void': {
      buyer: Uint8Array | string
      debtor: Uint8Array | string
      axferTxn: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64)void': [admin: Uint8Array | string, baseTokenId: bigint | number]
    'initApplication(pay,uint64,uint64,uint64,uint64,uint64)void': [mbrTxn: AppMethodCallTransactionArgument, ltvBps: bigint | number, liqThresholdBps: bigint | number, interestBps: bigint | number, originationFeeBps: bigint | number, protocolInterestFeeBps: bigint | number]
    'getCirculatingLST()uint64': []
    'getTotalDeposits()uint64': []
    'getOraclePoolsCount()uint64': []
    'getAcceptedCollateralsCount()uint64': []
    'addOraclePool(address,uint64)void': [poolAddress: string, contractAppId: bigint | number]
    'getOraclePrice(uint64,uint64)uint64': [tokenId: bigint | number, oracleIndex: bigint | number]
    'getPricesFromOracles(uint64)uint64': [tokenId: bigint | number]
    'addNewCollateralType(uint64,uint64)void': [collateralTokenId: bigint | number, baseTokenId: bigint | number]
    'depositASA(axfer,uint64)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number]
    'withdrawDeposit(axfer,uint64,uint64)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number, lstAppId: bigint | number]
    'borrow(axfer,uint64,uint64,uint64)void': [assetTransferTxn: AppMethodCallTransactionArgument, requestedLoanAmount: bigint | number, lstApp: bigint | number, collateralTokenId: bigint | number]
    'claimLoanRecordASA(account,asset)void': [debtor: Uint8Array | string, assetId: bigint]
    'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [borrowerAddress: Uint8Array | string]
    'getLoanRecordASAId(account)uint64': [borrowerAddress: Uint8Array | string]
    'repayLoan(axfer,uint64)void': [assetTransferTxn: AppMethodCallTransactionArgument, amount: bigint | number]
    'withdrawFees()void': []
    'accrueLoanInterest(account)void': [debtor: Uint8Array | string]
    'buyout(account,account,axfer)void': [buyer: Uint8Array | string, debtor: Uint8Array | string, axferTxn: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type WeLendReturns = {
  'createApplication(account,uint64)void': void
  'initApplication(pay,uint64,uint64,uint64,uint64,uint64)void': void
  'getCirculatingLST()uint64': bigint
  'getTotalDeposits()uint64': bigint
  'getOraclePoolsCount()uint64': bigint
  'getAcceptedCollateralsCount()uint64': bigint
  'addOraclePool(address,uint64)void': void
  'getOraclePrice(uint64,uint64)uint64': bigint
  'getPricesFromOracles(uint64)uint64': bigint
  'addNewCollateralType(uint64,uint64)void': void
  'depositASA(axfer,uint64)void': void
  'withdrawDeposit(axfer,uint64,uint64)void': void
  'borrow(axfer,uint64,uint64,uint64)void': void
  'claimLoanRecordASA(account,asset)void': void
  'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': LoanRecord
  'getLoanRecordASAId(account)uint64': bigint
  'repayLoan(axfer,uint64)void': void
  'withdrawFees()void': void
  'accrueLoanInterest(account)void': void
  'buyout(account,account,axfer)void': void
}

/**
 * Defines the types of available calls and state of the WeLend smart contract.
 */
export type WeLendTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64)void' | 'createApplication', {
      argsObj: WeLendArgs['obj']['createApplication(account,uint64)void']
      argsTuple: WeLendArgs['tuple']['createApplication(account,uint64)void']
      returns: WeLendReturns['createApplication(account,uint64)void']
    }>
    & Record<'initApplication(pay,uint64,uint64,uint64,uint64,uint64)void' | 'initApplication', {
      argsObj: WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']
      returns: WeLendReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'getCirculatingLST()uint64' | 'getCirculatingLST', {
      argsObj: WeLendArgs['obj']['getCirculatingLST()uint64']
      argsTuple: WeLendArgs['tuple']['getCirculatingLST()uint64']
      returns: WeLendReturns['getCirculatingLST()uint64']
    }>
    & Record<'getTotalDeposits()uint64' | 'getTotalDeposits', {
      argsObj: WeLendArgs['obj']['getTotalDeposits()uint64']
      argsTuple: WeLendArgs['tuple']['getTotalDeposits()uint64']
      returns: WeLendReturns['getTotalDeposits()uint64']
    }>
    & Record<'getOraclePoolsCount()uint64' | 'getOraclePoolsCount', {
      argsObj: WeLendArgs['obj']['getOraclePoolsCount()uint64']
      argsTuple: WeLendArgs['tuple']['getOraclePoolsCount()uint64']
      returns: WeLendReturns['getOraclePoolsCount()uint64']
    }>
    & Record<'getAcceptedCollateralsCount()uint64' | 'getAcceptedCollateralsCount', {
      argsObj: WeLendArgs['obj']['getAcceptedCollateralsCount()uint64']
      argsTuple: WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']
      returns: WeLendReturns['getAcceptedCollateralsCount()uint64']
    }>
    & Record<'addOraclePool(address,uint64)void' | 'addOraclePool', {
      argsObj: WeLendArgs['obj']['addOraclePool(address,uint64)void']
      argsTuple: WeLendArgs['tuple']['addOraclePool(address,uint64)void']
      returns: WeLendReturns['addOraclePool(address,uint64)void']
    }>
    & Record<'getOraclePrice(uint64,uint64)uint64' | 'getOraclePrice', {
      argsObj: WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64']
      argsTuple: WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']
      returns: WeLendReturns['getOraclePrice(uint64,uint64)uint64']
    }>
    & Record<'getPricesFromOracles(uint64)uint64' | 'getPricesFromOracles', {
      argsObj: WeLendArgs['obj']['getPricesFromOracles(uint64)uint64']
      argsTuple: WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']
      returns: WeLendReturns['getPricesFromOracles(uint64)uint64']
    }>
    & Record<'addNewCollateralType(uint64,uint64)void' | 'addNewCollateralType', {
      argsObj: WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void']
      argsTuple: WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']
      returns: WeLendReturns['addNewCollateralType(uint64,uint64)void']
    }>
    & Record<'depositASA(axfer,uint64)void' | 'depositASA', {
      argsObj: WeLendArgs['obj']['depositASA(axfer,uint64)void']
      argsTuple: WeLendArgs['tuple']['depositASA(axfer,uint64)void']
      returns: WeLendReturns['depositASA(axfer,uint64)void']
    }>
    & Record<'withdrawDeposit(axfer,uint64,uint64)void' | 'withdrawDeposit', {
      argsObj: WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void']
      argsTuple: WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']
      returns: WeLendReturns['withdrawDeposit(axfer,uint64,uint64)void']
    }>
    & Record<'borrow(axfer,uint64,uint64,uint64)void' | 'borrow', {
      argsObj: WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void']
      argsTuple: WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']
      returns: WeLendReturns['borrow(axfer,uint64,uint64,uint64)void']
    }>
    & Record<'claimLoanRecordASA(account,asset)void' | 'claimLoanRecordASA', {
      argsObj: WeLendArgs['obj']['claimLoanRecordASA(account,asset)void']
      argsTuple: WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']
      returns: WeLendReturns['claimLoanRecordASA(account,asset)void']
    }>
    & Record<'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getLoanRecord', {
      argsObj: WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: WeLendReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getLoanRecordASAId(account)uint64' | 'getLoanRecordASAId', {
      argsObj: WeLendArgs['obj']['getLoanRecordASAId(account)uint64']
      argsTuple: WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']
      returns: WeLendReturns['getLoanRecordASAId(account)uint64']
    }>
    & Record<'repayLoan(axfer,uint64)void' | 'repayLoan', {
      argsObj: WeLendArgs['obj']['repayLoan(axfer,uint64)void']
      argsTuple: WeLendArgs['tuple']['repayLoan(axfer,uint64)void']
      returns: WeLendReturns['repayLoan(axfer,uint64)void']
    }>
    & Record<'withdrawFees()void' | 'withdrawFees', {
      argsObj: WeLendArgs['obj']['withdrawFees()void']
      argsTuple: WeLendArgs['tuple']['withdrawFees()void']
      returns: WeLendReturns['withdrawFees()void']
    }>
    & Record<'accrueLoanInterest(account)void' | 'accrueLoanInterest', {
      argsObj: WeLendArgs['obj']['accrueLoanInterest(account)void']
      argsTuple: WeLendArgs['tuple']['accrueLoanInterest(account)void']
      returns: WeLendReturns['accrueLoanInterest(account)void']
    }>
    & Record<'buyout(account,account,axfer)void' | 'buyout', {
      argsObj: WeLendArgs['obj']['buyout(account,account,axfer)void']
      argsTuple: WeLendArgs['tuple']['buyout(account,account,axfer)void']
      returns: WeLendReturns['buyout(account,account,axfer)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        baseTokenId: bigint
        lstTokenId: bigint
        circulatingLst: bigint
        totalDeposits: bigint
        adminAccount: BinaryState
        ltvBps: bigint
        liqThresholdBps: bigint
        interestBps: bigint
        originationFeeBps: bigint
        protocolInterestFeeBps: bigint
        activeLoanRecords: bigint
        oraclePoolsCount: bigint
        acceptedCollateralsCount: bigint
        feePool: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        oraclePool: Oracle
        acceptedCollaterals: AcceptedCollateral
        loanRecord: LoanRecord
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WeLendSignatures = keyof WeLendTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WeLendNonVoidMethodSignatures = keyof WeLendTypes['methods'] extends infer T ? T extends keyof WeLendTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WeLend smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WeLendSignatures> = WeLendTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WeLend smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WeLendSignatures> = WeLendTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WeLendTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WeLendTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WeLendCreateCallParams =
  | Expand<CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication(account,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WeLendDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WeLendCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WeLend smart contract
 */
export abstract class WeLendParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WeLendCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64)void':
            return WeLendParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the weLend smart contract using the createApplication(account,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.baseTokenId],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initApplication(pay,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initApplication(params: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initApplication(pay,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrTxn, params.args.ltvBps, params.args.liqThresholdBps, params.args.interestBps, params.args.originationFeeBps, params.args.protocolInterestFeeBps],
    }
  }
  /**
   * Constructs a no op call for the getCirculatingLST()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCirculatingLst(params: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCirculatingLST()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getTotalDeposits()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalDeposits(params: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotalDeposits()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getOraclePoolsCount()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOraclePoolsCount(params: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOraclePoolsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAcceptedCollateralsCount()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAcceptedCollateralsCount(params: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAcceptedCollateralsCount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addOraclePool(address,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addOraclePool(params: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addOraclePool(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolAddress, params.args.contractAppId],
    }
  }
  /**
   * Constructs a no op call for the getOraclePrice(uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOraclePrice(params: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getOraclePrice(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId, params.args.oracleIndex],
    }
  }
  /**
   * Constructs a no op call for the getPricesFromOracles(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPricesFromOracles(params: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPricesFromOracles(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the addNewCollateralType(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addNewCollateralType(params: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addNewCollateralType(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralTokenId, params.args.baseTokenId],
    }
  }
  /**
   * Constructs a no op call for the depositASA(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositAsa(params: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'depositASA(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the withdrawDeposit(axfer,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawDeposit(params: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawDeposit(axfer,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount, params.args.lstAppId],
    }
  }
  /**
   * Constructs a no op call for the borrow(axfer,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static borrow(params: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'borrow(axfer,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.requestedLoanAmount, params.args.lstApp, params.args.collateralTokenId],
    }
  }
  /**
   * Constructs a no op call for the claimLoanRecordASA(account,asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimLoanRecordAsa(params: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimLoanRecordASA(account,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor, params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRecord(params: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrowerAddress],
    }
  }
  /**
   * Constructs a no op call for the getLoanRecordASAId(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLoanRecordAsaId(params: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLoanRecordASAId(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.borrowerAddress],
    }
  }
  /**
   * Constructs a no op call for the repayLoan(axfer,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repayLoan(params: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repayLoan(axfer,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetTransferTxn, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the withdrawFees()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawFees(params: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawFees()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the accrueLoanInterest(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static accrueLoanInterest(params: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accrueLoanInterest(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.debtor],
    }
  }
  /**
   * Constructs a no op call for the buyout(account,account,axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyout(params: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buyout(account,account,axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.debtor, params.args.axferTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the weLend smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WeLendFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WeLendFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WeLendClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WeLendClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the weLend smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WeLendDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WeLendParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WeLendCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WeLendClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the weLend smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(WeLendParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the weLend smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(WeLendParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the weLend smart contract using an ABI method call using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WeLendArgs['obj']['createApplication(account,uint64)void'] | WeLendArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(WeLendParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WeLendReturns['createApplication(account,uint64)void']) }, appClient: new WeLendClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the weLend smart contract
 */
export class WeLendClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WeLendClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WeLend app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WeLendClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WeLendNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WeLendClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WeLendClient> {
    return new WeLendClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WeLendClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WeLendClient> {
    return new WeLendClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the weLend smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the weLend smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initApplication: (params: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCirculatingLst: (params: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeLendParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalDeposits: (params: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeLendParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePoolsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOraclePoolsCount: (params: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeLendParamsFactory.getOraclePoolsCount(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAcceptedCollateralsCount: (params: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeLendParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `addOraclePool(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addOraclePool: (params: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.addOraclePool(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePrice(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOraclePrice: (params: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getPricesFromOracles(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPricesFromOracles: (params: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.getPricesFromOracles(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `addNewCollateralType(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addNewCollateralType: (params: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `depositASA(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositAsa: (params: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.depositAsa(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawDeposit(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawDeposit: (params: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `borrow(axfer,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    borrow: (params: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimLoanRecordAsa: (params: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.claimLoanRecordAsa(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanRecord: (params: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLoanRecordAsaId: (params: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.getLoanRecordAsaId(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `repayLoan(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repayLoan: (params: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.repayLoan(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawFees: (params: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeLendParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `accrueLoanInterest(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    accrueLoanInterest: (params: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `buyout(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyout: (params: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeLendParamsFactory.buyout(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the weLend smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the weLend smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initApplication: (params: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.initApplication(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCirculatingLst: (params: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getCirculatingLst(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalDeposits: (params: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getTotalDeposits(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePoolsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOraclePoolsCount: (params: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getOraclePoolsCount(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAcceptedCollateralsCount: (params: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getAcceptedCollateralsCount(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `addOraclePool(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addOraclePool: (params: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.addOraclePool(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePrice(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOraclePrice: (params: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getOraclePrice(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getPricesFromOracles(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPricesFromOracles: (params: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getPricesFromOracles(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `addNewCollateralType(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addNewCollateralType: (params: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.addNewCollateralType(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `depositASA(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositAsa: (params: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.depositAsa(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawDeposit(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawDeposit: (params: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.withdrawDeposit(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `borrow(axfer,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    borrow: (params: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimLoanRecordAsa: (params: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.claimLoanRecordAsa(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanRecord: (params: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getLoanRecord(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLoanRecordAsaId: (params: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.getLoanRecordAsaId(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `repayLoan(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repayLoan: (params: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.repayLoan(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawFees: (params: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `accrueLoanInterest(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    accrueLoanInterest: (params: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.accrueLoanInterest(params))
    },

    /**
     * Makes a call to the weLend smart contract using the `buyout(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyout: (params: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeLendParamsFactory.buyout(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the weLend smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the weLend smart contract using the `initApplication(pay,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initApplication: async (params: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.initApplication(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getCirculatingLST()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCirculatingLst: async (params: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getCirculatingLst(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getCirculatingLST()uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getTotalDeposits()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalDeposits: async (params: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getTotalDeposits(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getTotalDeposits()uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePoolsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOraclePoolsCount: async (params: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getOraclePoolsCount(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getOraclePoolsCount()uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getAcceptedCollateralsCount()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAcceptedCollateralsCount: async (params: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getAcceptedCollateralsCount(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getAcceptedCollateralsCount()uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `addOraclePool(address,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addOraclePool: async (params: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.addOraclePool(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['addOraclePool(address,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getOraclePrice(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOraclePrice: async (params: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getOraclePrice(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getOraclePrice(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getPricesFromOracles(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPricesFromOracles: async (params: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getPricesFromOracles(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getPricesFromOracles(uint64)uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `addNewCollateralType(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addNewCollateralType: async (params: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.addNewCollateralType(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['addNewCollateralType(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `depositASA(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositAsa: async (params: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.depositAsa(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['depositASA(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawDeposit(axfer,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawDeposit: async (params: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.withdrawDeposit(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['withdrawDeposit(axfer,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `borrow(axfer,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    borrow: async (params: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.borrow(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['borrow(axfer,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `claimLoanRecordASA(account,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimLoanRecordAsa: async (params: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.claimLoanRecordAsa(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['claimLoanRecordASA(account,asset)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanRecord: async (params: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getLoanRecord(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `getLoanRecordASAId(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLoanRecordAsaId: async (params: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.getLoanRecordAsaId(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['getLoanRecordASAId(account)uint64'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `repayLoan(axfer,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repayLoan: async (params: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.repayLoan(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['repayLoan(axfer,uint64)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `withdrawFees()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawFees: async (params: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.withdrawFees(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['withdrawFees()void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `accrueLoanInterest(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    accrueLoanInterest: async (params: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.accrueLoanInterest(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['accrueLoanInterest(account)void'])}
    },

    /**
     * Makes a call to the weLend smart contract using the `buyout(account,account,axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyout: async (params: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeLendParamsFactory.buyout(params))
      return {...result, return: result.return as unknown as (undefined | WeLendReturns['buyout(account,account,axfer)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WeLendClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current weLend app
   */
  state = {
    /**
     * Methods to access global state for the current weLend app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          baseTokenId: result.base_token_id,
          lstTokenId: result.lst_token_id,
          circulatingLst: result.circulating_lst,
          totalDeposits: result.total_deposits,
          adminAccount: new BinaryStateValue(result.admin_account),
          ltvBps: result.ltv_bps,
          liqThresholdBps: result.liq_threshold_bps,
          interestBps: result.interest_bps,
          originationFeeBps: result.origination_fee_bps,
          protocolInterestFeeBps: result.protocol_interest_fee_bps,
          activeLoanRecords: result.active_loan_records,
          oraclePoolsCount: result.oracle_pools_count,
          acceptedCollateralsCount: result.accepted_collaterals_count,
          feePool: result.fee_pool,
        }
      },
      /**
       * Get the current value of the base_token_id key in global state
       */
      baseTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("base_token_id")) as bigint | undefined },
      /**
       * Get the current value of the lst_token_id key in global state
       */
      lstTokenId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lst_token_id")) as bigint | undefined },
      /**
       * Get the current value of the circulating_lst key in global state
       */
      circulatingLst: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("circulating_lst")) as bigint | undefined },
      /**
       * Get the current value of the total_deposits key in global state
       */
      totalDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_deposits")) as bigint | undefined },
      /**
       * Get the current value of the admin_account key in global state
       */
      adminAccount: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin_account")) as Uint8Array | undefined) },
      /**
       * Get the current value of the ltv_bps key in global state
       */
      ltvBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ltv_bps")) as bigint | undefined },
      /**
       * Get the current value of the liq_threshold_bps key in global state
       */
      liqThresholdBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("liq_threshold_bps")) as bigint | undefined },
      /**
       * Get the current value of the interest_bps key in global state
       */
      interestBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("interest_bps")) as bigint | undefined },
      /**
       * Get the current value of the origination_fee_bps key in global state
       */
      originationFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("origination_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the protocol_interest_fee_bps key in global state
       */
      protocolInterestFeeBps: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("protocol_interest_fee_bps")) as bigint | undefined },
      /**
       * Get the current value of the active_loan_records key in global state
       */
      activeLoanRecords: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("active_loan_records")) as bigint | undefined },
      /**
       * Get the current value of the oracle_pools_count key in global state
       */
      oraclePoolsCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oracle_pools_count")) as bigint | undefined },
      /**
       * Get the current value of the accepted_collaterals_count key in global state
       */
      acceptedCollateralsCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accepted_collaterals_count")) as bigint | undefined },
      /**
       * Get the current value of the fee_pool key in global state
       */
      feePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee_pool")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current weLend app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          oraclePool: result.oracle_pool,
          acceptedCollaterals: result.accepted_collaterals,
          loanRecord: result.loan_record,
        }
      },
      /**
       * Get the current value of the oracle_pool key in box state
       */
      oraclePool: async (): Promise<Oracle | undefined> => { return (await this.appClient.state.box.getValue("oracle_pool")) as Oracle | undefined },
      /**
       * Get the current value of the accepted_collaterals key in box state
       */
      acceptedCollaterals: async (): Promise<AcceptedCollateral | undefined> => { return (await this.appClient.state.box.getValue("accepted_collaterals")) as AcceptedCollateral | undefined },
      /**
       * Get the current value of the loan_record key in box state
       */
      loanRecord: async (): Promise<LoanRecord | undefined> => { return (await this.appClient.state.box.getValue("loan_record")) as LoanRecord | undefined },
    },
  }

  public newGroup(): WeLendComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initApplication(pay,uint64,uint64,uint64,uint64,uint64)void method call against the weLend contract
       */
      initApplication(params: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCirculatingLST()uint64 method call against the weLend contract
       */
      getCirculatingLst(params: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCirculatingLst(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCirculatingLST()uint64', v))
        return this
      },
      /**
       * Add a getTotalDeposits()uint64 method call against the weLend contract
       */
      getTotalDeposits(params: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalDeposits(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotalDeposits()uint64', v))
        return this
      },
      /**
       * Add a getOraclePoolsCount()uint64 method call against the weLend contract
       */
      getOraclePoolsCount(params: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOraclePoolsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOraclePoolsCount()uint64', v))
        return this
      },
      /**
       * Add a getAcceptedCollateralsCount()uint64 method call against the weLend contract
       */
      getAcceptedCollateralsCount(params: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAcceptedCollateralsCount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAcceptedCollateralsCount()uint64', v))
        return this
      },
      /**
       * Add a addOraclePool(address,uint64)void method call against the weLend contract
       */
      addOraclePool(params: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addOraclePool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getOraclePrice(uint64,uint64)uint64 method call against the weLend contract
       */
      getOraclePrice(params: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOraclePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('getOraclePrice(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getPricesFromOracles(uint64)uint64 method call against the weLend contract
       */
      getPricesFromOracles(params: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPricesFromOracles(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPricesFromOracles(uint64)uint64', v))
        return this
      },
      /**
       * Add a addNewCollateralType(uint64,uint64)void method call against the weLend contract
       */
      addNewCollateralType(params: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addNewCollateralType(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a depositASA(axfer,uint64)void method call against the weLend contract
       */
      depositAsa(params: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawDeposit(axfer,uint64,uint64)void method call against the weLend contract
       */
      withdrawDeposit(params: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawDeposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a borrow(axfer,uint64,uint64,uint64)void method call against the weLend contract
       */
      borrow(params: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.borrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimLoanRecordASA(account,asset)void method call against the weLend contract
       */
      claimLoanRecordAsa(params: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimLoanRecordAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the weLend contract
       */
      getLoanRecord(params: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRecord(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getLoanRecordASAId(account)uint64 method call against the weLend contract
       */
      getLoanRecordAsaId(params: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLoanRecordAsaId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLoanRecordASAId(account)uint64', v))
        return this
      },
      /**
       * Add a repayLoan(axfer,uint64)void method call against the weLend contract
       */
      repayLoan(params: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repayLoan(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawFees()void method call against the weLend contract
       */
      withdrawFees(params: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawFees(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a accrueLoanInterest(account)void method call against the weLend contract
       */
      accrueLoanInterest(params: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.accrueLoanInterest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buyout(account,account,axfer)void method call against the weLend contract
       */
      buyout(params: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyout(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the weLend contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WeLendComposer
  }
}
export type WeLendComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initApplication(pay,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initApplication(params?: CallParams<WeLendArgs['obj']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['initApplication(pay,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the getCirculatingLST()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCirculatingLst(params?: CallParams<WeLendArgs['obj']['getCirculatingLST()uint64'] | WeLendArgs['tuple']['getCirculatingLST()uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getCirculatingLST()uint64'] | undefined]>

  /**
   * Calls the getTotalDeposits()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalDeposits(params?: CallParams<WeLendArgs['obj']['getTotalDeposits()uint64'] | WeLendArgs['tuple']['getTotalDeposits()uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getTotalDeposits()uint64'] | undefined]>

  /**
   * Calls the getOraclePoolsCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOraclePoolsCount(params?: CallParams<WeLendArgs['obj']['getOraclePoolsCount()uint64'] | WeLendArgs['tuple']['getOraclePoolsCount()uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getOraclePoolsCount()uint64'] | undefined]>

  /**
   * Calls the getAcceptedCollateralsCount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAcceptedCollateralsCount(params?: CallParams<WeLendArgs['obj']['getAcceptedCollateralsCount()uint64'] | WeLendArgs['tuple']['getAcceptedCollateralsCount()uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getAcceptedCollateralsCount()uint64'] | undefined]>

  /**
   * Calls the addOraclePool(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addOraclePool(params?: CallParams<WeLendArgs['obj']['addOraclePool(address,uint64)void'] | WeLendArgs['tuple']['addOraclePool(address,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['addOraclePool(address,uint64)void'] | undefined]>

  /**
   * Calls the getOraclePrice(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOraclePrice(params?: CallParams<WeLendArgs['obj']['getOraclePrice(uint64,uint64)uint64'] | WeLendArgs['tuple']['getOraclePrice(uint64,uint64)uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getOraclePrice(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getPricesFromOracles(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPricesFromOracles(params?: CallParams<WeLendArgs['obj']['getPricesFromOracles(uint64)uint64'] | WeLendArgs['tuple']['getPricesFromOracles(uint64)uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getPricesFromOracles(uint64)uint64'] | undefined]>

  /**
   * Calls the addNewCollateralType(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addNewCollateralType(params?: CallParams<WeLendArgs['obj']['addNewCollateralType(uint64,uint64)void'] | WeLendArgs['tuple']['addNewCollateralType(uint64,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['addNewCollateralType(uint64,uint64)void'] | undefined]>

  /**
   * Calls the depositASA(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositAsa(params?: CallParams<WeLendArgs['obj']['depositASA(axfer,uint64)void'] | WeLendArgs['tuple']['depositASA(axfer,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['depositASA(axfer,uint64)void'] | undefined]>

  /**
   * Calls the withdrawDeposit(axfer,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawDeposit(params?: CallParams<WeLendArgs['obj']['withdrawDeposit(axfer,uint64,uint64)void'] | WeLendArgs['tuple']['withdrawDeposit(axfer,uint64,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['withdrawDeposit(axfer,uint64,uint64)void'] | undefined]>

  /**
   * Calls the borrow(axfer,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrow(params?: CallParams<WeLendArgs['obj']['borrow(axfer,uint64,uint64,uint64)void'] | WeLendArgs['tuple']['borrow(axfer,uint64,uint64,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['borrow(axfer,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the claimLoanRecordASA(account,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimLoanRecordAsa(params?: CallParams<WeLendArgs['obj']['claimLoanRecordASA(account,asset)void'] | WeLendArgs['tuple']['claimLoanRecordASA(account,asset)void']>): WeLendComposer<[...TReturns, WeLendReturns['claimLoanRecordASA(account,asset)void'] | undefined]>

  /**
   * Calls the getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRecord(params?: CallParams<WeLendArgs['obj']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | WeLendArgs['tuple']['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): WeLendComposer<[...TReturns, WeLendReturns['getLoanRecord(account)(address,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getLoanRecordASAId(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLoanRecordAsaId(params?: CallParams<WeLendArgs['obj']['getLoanRecordASAId(account)uint64'] | WeLendArgs['tuple']['getLoanRecordASAId(account)uint64']>): WeLendComposer<[...TReturns, WeLendReturns['getLoanRecordASAId(account)uint64'] | undefined]>

  /**
   * Calls the repayLoan(axfer,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repayLoan(params?: CallParams<WeLendArgs['obj']['repayLoan(axfer,uint64)void'] | WeLendArgs['tuple']['repayLoan(axfer,uint64)void']>): WeLendComposer<[...TReturns, WeLendReturns['repayLoan(axfer,uint64)void'] | undefined]>

  /**
   * Calls the withdrawFees()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawFees(params?: CallParams<WeLendArgs['obj']['withdrawFees()void'] | WeLendArgs['tuple']['withdrawFees()void']>): WeLendComposer<[...TReturns, WeLendReturns['withdrawFees()void'] | undefined]>

  /**
   * Calls the accrueLoanInterest(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  accrueLoanInterest(params?: CallParams<WeLendArgs['obj']['accrueLoanInterest(account)void'] | WeLendArgs['tuple']['accrueLoanInterest(account)void']>): WeLendComposer<[...TReturns, WeLendReturns['accrueLoanInterest(account)void'] | undefined]>

  /**
   * Calls the buyout(account,account,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyout(params?: CallParams<WeLendArgs['obj']['buyout(account,account,axfer)void'] | WeLendArgs['tuple']['buyout(account,account,axfer)void']>): WeLendComposer<[...TReturns, WeLendReturns['buyout(account,account,axfer)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the weLend smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WeLendComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WeLendComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WeLendComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WeLendComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WeLendComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WeLendComposerResults<TReturns>>
}
export type WeLendComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

